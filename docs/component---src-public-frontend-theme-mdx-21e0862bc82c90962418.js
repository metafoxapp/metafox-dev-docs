(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{buVB:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return l})),n.d(t,"default",(function(){return m}));var a=n("Fcif"),o=n("+I+c"),s=(n("mXGw"),n("/FXl")),r=n("TjRS"),l=(n("aD51"),{});void 0!==l&&l&&l===Object(l)&&Object.isExtensible(l)&&!l.hasOwnProperty("__filemeta")&&Object.defineProperty(l,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/public/frontend/theme.mdx"}});var c={_frontmatter:l},i=r.a;function m(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(s.b)(i,Object(a.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(s.b)("h1",{id:"basic"},"Basic"),Object(s.b)("p",null,"phpFox platform theme system is based on ",Object(s.b)("a",{parentName:"p",href:"https://mui.com/"},"Material-UI"),", A ",Object(s.b)("a",{parentName:"p",href:""},"ThemeProvider")," component created and you are able to acess all standard ",Object(s.b)("inlineCode",{parentName:"p"},"Material-UI")," features in phpfox platform."),Object(s.b)("h2",{id:"theme-themeprovider"},"Theme ThemeProvider"),Object(s.b)("p",null,"You can pass a custom css rules overrides to global, by modify themeOptions:"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-tsx"},"// file packages/sites/example/src/themeOptions.tsx\n\nconst themeOptions = {\n  overrides: {\n    MuiCssBaseline: {\n      'your-css-selector': {\n        // pass css object here\n      }\n    }\n  }\n};\n")),Object(s.b)("p",null,"Reading futher information ",Object(s.b)("a",{parentName:"p",href:"https://mui.com/material-ui/customization/theming/#themeprovider"},"https://mui.com/material-ui/customization/theming/#themeprovider")),Object(s.b)("h2",{id:"styled"},"styled"),Object(s.b)("p",null,"Most of developers write custom styles using makeStyles, creatStyles features, look likes:"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-tsx"},"// file MyComponent.styles.tsx\nimport { makeStyles, createStyles, Theme } from '@metafox/ui/styles';\n\nconst useStyles = makeStyles(\n  (theme: Theme) =>\n    createStyles({\n      root: {},\n      header: {\n        display: 'flex',\n        alignItems: 'center',\n        color: theme.palette.primary.main,\n        marginBottom: theme.spacing(2)\n      }\n    }),\n  { name: 'MuiSideMenu' }\n);\n\nexport default useStyles;\n")),Object(s.b)("p",null,"In component"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-tsx"},"// file MyComponent.tsx\nimport useStyles from './MyComponent.styles'\n\nconst MyComponent = ()=>{\n  const classes  = useStyles();\n\n  return (\n    <div className={classes.root}>\n      ... others class access here.\n    </div>);\n}\n\nControl className logic\n\nMost of developers control React className properties logic by `classnames` or `clsx` tools.\n`clsx` is choice of `Material-UI` team. I dont know why but we should not add others tools for the same features.\n\nFor more information you can check [trends](https://www.npmtrends.com/classnames-vs-clsx) and [clsx](https://github.com/lukeed/clsx)\n\n")),Object(s.b)("h2",{id:"variables"},"Variables"),Object(s.b)("p",null,"TBD by @sonh"),Object(s.b)("h2",{id:"add-mixins"},"Add mixins"),Object(s.b)("p",null,"TBD by @sonh"),Object(s.b)("h2",{id:"dark-mode-vs-light-mode"},"Dark mode vs Light mode"),Object(s.b)("p",null,"TBD by @sonh"),Object(s.b)("h2",{id:"theme-editor"},"Theme Editor"),Object(s.b)("p",null,"TBD by @sonh"),Object(s.b)("h2",{id:"guidelines"},"Guidelines"),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},"Separate styling to ",Object(s.b)("inlineCode",{parentName:"li"},"*.styles.tsx")),Object(s.b)("li",{parentName:"ul"},"Do not pass object to ",Object(s.b)("inlineCode",{parentName:"li"},"useStyles")),Object(s.b)("li",{parentName:"ul"},"TBD by @sonh")),Object(s.b)("h2",{id:"typescript"},"Typescript"),Object(s.b)("p",null,"In others to extends declaration, read futher ",Object(s.b)("a",{parentName:"p",href:"https://material-ui.com/guides/typescript/#customization-of-theme"},"Customization of theme")," and ",Object(s.b)("a",{parentName:"p",href:"https://www.typescriptlang.org/docs/handbook/declaration-merging.html#module-augmentation"},"Module Augmentation")),Object(s.b)("h1",{id:"theming"},"Theming"),Object(s.b)("p",null,"Theming is the ability to systematically customize site look & feel to better reflect your productâ€™s brand such as color, spacing, round corner, shadow, background and typography."),Object(s.b)("p",null,"@metafox provider MaterialUI ThemeProvider at RootContainer, developer can access add new variable to themes provider."),Object(s.b)("h2",{id:"variables-1"},"Variables"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-js"},"// file /src/themes.tsx\nexport default {\n  status: {\n    color: '#dadada',\n    background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)'\n  }\n};\n")),Object(s.b)("h2",{id:"hook"},"Hook"),Object(s.b)("p",null,"using ",Object(s.b)("inlineCode",{parentName:"p"},"useTheme")," in pure function to get theme variable"),Object(s.b)("p",null,"Examples"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-jsx"},"import { useTheme } from '@metafox/core/theme';\n\nexport const MyComponent = () => {\n  const theme = useTheme();\n  return (\n    <span\n      style={{ background: theme.status.background, color: theme.status.color }}\n    >\n      Using Theme Variable\n    </span>\n  );\n};\n")),Object(s.b)("h2",{id:"hoc"},"HOC"),Object(s.b)("p",null,"Examples"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-jsx"},"import { withTheme } from '@metafox/core/theme';\n\nfunction DeepChildRaw(props) {\n  const theme = useTheme();\n  return (\n    <span\n      style={{ background: theme.status.background, color: theme.status.color }}\n    >\n      Using Theme Variable\n    </span>\n  );\n}\n\nconst DeepChild = withTheme(DeepChildRaw);\n")),Object(s.b)("h2",{id:"theme-questions"},"Theme Questions"),Object(s.b)("ol",null,Object(s.b)("li",{parentName:"ol"},"How to add new custom fonts ?"),Object(s.b)("li",{parentName:"ol"},"How to add more icon ?"),Object(s.b)("li",{parentName:"ol"},"Use font icon vs svg icon ?")))}void 0!==m&&m&&m===Object(m)&&Object.isExtensible(m)&&!m.hasOwnProperty("__filemeta")&&Object.defineProperty(m,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/public/frontend/theme.mdx"}}),m.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-public-frontend-theme-mdx-21e0862bc82c90962418.js.map