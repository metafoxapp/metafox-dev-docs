{"version":3,"sources":["webpack:///../src/public/frontend/dialog.mdx"],"names":["_frontmatter","name","DialogContentText","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","isMDXComponent"],"mappings":"wPAQaA,G,UAAe,S,gNAE5B,IAAsBC,EAKhBC,GALgBD,EAKkB,oBALV,SAA6BE,GAEzD,OADAC,QAAQC,KAAK,aAAeJ,EAAO,2EAC5B,kBAASE,KAIZG,EAAc,CAClBN,gBAEIO,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGP,EACF,8BACD,OAAO,YAACI,EAAD,eAAeD,EAAiBH,EAAhC,CAAuCO,WAAYA,EAAYC,QAAQ,cAG5E,iCAAgB,0BAAYC,WAAW,KAAvB,UAAhB,gBAAmF,iBAAGA,WAAW,IAC7F,KAAQ,sDADuE,sBAAnF,qCAG6B,0BAAYA,WAAW,KAAvB,iBAH7B,+EAI+D,0BAAYA,WAAW,KAAvB,iBAJ/D,gBAIyI,0BAAYA,WAAW,KAAvB,aAJzI,WAKA,kBACE,GAAM,iBADR,iBAGA,kHACA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBADZ,0yBAyCL,kBACE,GAAM,iBADR,iBAGA,qFACA,gEAA+C,0BAAYA,WAAW,KAAvB,sBAC/C,uBAAK,oBAAMA,WAAW,MAClB,UAAa,iBADZ,6DAOL,kBACE,GAAM,WADR,WAGA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBADZ,0lBA0BL,kBACE,GAAM,SADR,SAGA,4CACA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBADZ,oGAOL,8CACA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBADZ,+HAOL,0CACA,gEAA+C,YAACV,EAAD,CAAmBS,QAAQ,sBAA1E,sCACA,uBAAK,oBAAMC,WAAW,MAClB,UAAa,gBADZ,6JAUL,kBACE,GAAM,WADR,WAGA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBADZ,+GAOL,oEACA,sCACA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBADZ,+GAOL,kBACE,GAAM,WADR,WAGA,kDACA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBADZ,8BAIL,kBACE,GAAM,eADR,eAGA,0CACA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBADZ,mCAIL,kBACE,GAAM,eADR,eAGA,8BAAa,0BAAYA,WAAW,KAAvB,kBAAb,iD,8MAKJH,EAAWI,gBAAiB","file":"component---src-public-frontend-dialog-mdx-43736ca04654c88aa64f.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/phongbn/Documents/Sites/mfdocs-dev/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst DialogContentText = makeShortcode(\"DialogContentText\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <p>{`@metafox `}<inlineCode parentName=\"p\">{`Dialog`}</inlineCode>{` is based on `}<a parentName=\"p\" {...{\n        \"href\": \"https://material-ui.com/components/dialogs/#dialog\"\n      }}>{`Material-UI Dialog`}</a>{`,\nWe wrapped in a Controller and `}<inlineCode parentName=\"p\">{`dialogBackend`}</inlineCode>{` services\nto make developers more easily to work with Dialog Component, by `}<inlineCode parentName=\"p\">{`dialogBackend`}</inlineCode>{` service and `}<inlineCode parentName=\"p\">{`useDialog`}</inlineCode>{` hooks.`}</p>\n    <h2 {...{\n      \"id\": \"create-dialog\"\n    }}>{`Create Dialog`}</h2>\n    <p>{`Example declaration a simple dialog. Note that annotations must be begine of source file.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`/**\n * @type: dialog\n * name: ExampleDialog\n *\n */\n\nimport {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle\n} from '@metafox/dialog';\nimport React from 'react';\n\nexport default function ExampleDialog({\n  title,\n  message\n}}) {\n  const { useDialog } = useGlobal();\n  const { setDialogValue, dialogProps } = useDialog();\n\n  const onSubmit = () => setDialogValue(true);\n\n  const onCancel = () => setDialogValue();\n\n  return (\n    <Dialog {...dialogProps}>\n      <DialogTitle id=\"dialog-title\">{title}</DialogTitle>\n      <DialogContent>{message}</DialogContent>\n      <DialogActions>\n        <Button onClick={onCancel}>OK</Button>\n        <Button onClick={onSubmit}>Cancel</Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"export-dialog\"\n    }}>{`Export Dialog`}</h2>\n    <p>{`Using @metafox annotations syntax to use the created dialog.`}</p>\n    <p>{`etc: this source defines a dialog named `}<inlineCode parentName=\"p\">{`sampleModalDialog`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`/**\n * @type: dialog\n * name: sampleModalDialog\n */\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"present\"\n    }}>{`Present`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const value = await dialogBackend.present({\n  component: 'sampleModalDialog',\n  props: {\n    title: 'Simple Dialog Title',\n    message:\n      'This is simple dialog demo, you can extends with others function laters.'\n  }\n});\n\nIn order to present dialog, pass compnent = \"sampleModalDialog\" to dialogBackend.\n\ndialogBackend\n  .present({\n    component: 'sampleModalDialog',\n    props: {\n      title: 'Simple Dialog Title',\n      message:\n        'This is simple dialog demo, you can extends with others function laters.'\n    }\n  })\n  .then(value => {\n    // your code\n  });\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"alert\"\n    }}>{`Alert`}</h3>\n    <p>{`Single line message`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`dialogBackend.alert({\n  title: 'Alert',\n  messsage: 'You can not delete this content!'\n});\n`}</code></pre>\n    <p>{`Multiple line message`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`dialogBackend.alert({\n  message:\n    '- Checking the network cables, modem, and router\\\\n- Reconnecting to Wi-Fi'\n});\n`}</code></pre>\n    <p>{`Message Component`}</p>\n    <p>{`Content of message should be wrapped in `}<DialogContentText mdxType=\"DialogContentText\" />{` to keep consistent look and feel.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`dialogBackend.alert({\n  message: (\n    <DialogContentText>\n      Checking the network cables, modem, and router\n    </DialogContentText>\n  )\n});\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"confirm\"\n    }}>{`Confirm`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const ok: boolean = await dialogBackend.confirm({\n  title: 'Confirm',\n  messsage: 'Are you sure?'\n});\n`}</code></pre>\n    <p>{`Message content is similar to alert method.`}</p>\n    <p>{`Custom Button`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const ok: boolean = await dialogBackend.confirm({\n  title: 'Confirm',\n  messsage: 'Are you sure?'\n});\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"dismiss\"\n    }}>{`Dismiss`}</h3>\n    <p>{`Dismiss presenting dialog`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`dialogBackend.dimiss();\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"dismiss-all\"\n    }}>{`Dismiss All`}</h3>\n    <p>{`Dimiss all dialog`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`dialogBackend.dismiss(true);\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"dialog-form\"\n    }}>{`Dialog Form`}</h3>\n    <p>{`Using `}<inlineCode parentName=\"p\">{`setDialogValue`}</inlineCode>{` to set value for current promise call.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}