{"version":3,"sources":["webpack:///../src/public/frontend/theme.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"wPAQaA,G,UAAe,S,+MAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,kBACE,GAAM,SADR,SAGA,iEAAgD,iBAAGC,WAAW,IAC1D,KAAQ,oBADoC,eAAhD,OAEgC,iBAAGA,WAAW,IAC1C,KAAQ,IADoB,iBAFhC,6DAIwF,0BAAYA,WAAW,KAAvB,eAJxF,iCAKA,kBACE,GAAM,uBADR,uBAGA,qGACA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBADZ,mNAcL,mDAAkC,iBAAGA,WAAW,IAC5C,KAAQ,oEADsB,qEAGlC,kBACE,GAAM,UADR,UAGA,mHACA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBADZ,mbAqBL,qCACA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBADZ,0mBAsBL,kBACE,GAAM,aADR,aAGA,qCACA,kBACE,GAAM,cADR,cAGA,qCACA,kBACE,GAAM,2BADR,2BAGA,qCACA,kBACE,GAAM,gBADR,gBAGA,qCACA,kBACE,GAAM,cADR,cAGA,sBACE,kBAAIA,WAAW,MAAf,uBAA4C,0BAAYA,WAAW,MAAvB,iBAC5C,kBAAIA,WAAW,MAAf,yBAA8C,0BAAYA,WAAW,MAAvB,cAC9C,kBAAIA,WAAW,MAAf,iBAEF,kBACE,GAAM,cADR,cAGA,sEAAqD,iBAAGA,WAAW,IAC/D,KAAQ,qEADyC,0BAArD,QAE4C,iBAAGA,WAAW,IACtD,KAAQ,6FADgC,wBAG5C,kBACE,GAAM,WADR,WAGA,4MACA,+IACA,kBACE,GAAM,eADR,aAGA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,eADZ,iKAUL,kBACE,GAAM,QADR,QAGA,8BAAa,0BAAYA,WAAW,KAAvB,YAAb,2CACA,iCACA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBADZ,4RAeL,kBACE,GAAM,OADR,OAGA,iCACA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBADZ,sUAiBL,kBACE,GAAM,mBADR,mBAGA,sBACE,kBAAIA,WAAW,MAAf,iCACA,kBAAIA,WAAW,MAAf,0BACA,kBAAIA,WAAW,MAAf,sC,6MAMNJ,EAAWK,gBAAiB","file":"component---src-public-frontend-theme-mdx-eceb77848e968eba74ed.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/phongbn/Documents/Sites/mfdocs-dev/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"basic\"\n    }}>{`Basic`}</h1>\n    <p>{`phpFox platform theme system is based on `}<a parentName=\"p\" {...{\n        \"href\": \"https://mui.com/\"\n      }}>{`Material-UI`}</a>{`, A `}<a parentName=\"p\" {...{\n        \"href\": \"\"\n      }}>{`ThemeProvider`}</a>{` component created and you are able to acess all standard `}<inlineCode parentName=\"p\">{`Material-UI`}</inlineCode>{` features in phpfox platform.`}</p>\n    <h2 {...{\n      \"id\": \"theme-themeprovider\"\n    }}>{`Theme ThemeProvider`}</h2>\n    <p>{`You can pass a custom css rules overrides to global, by modify themeOptions:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`// file packages/sites/example/src/themeOptions.tsx\n\nconst themeOptions = {\n  overrides: {\n    MuiCssBaseline: {\n      'your-css-selector': {\n        // pass css object here\n      }\n    }\n  }\n};\n`}</code></pre>\n    <p>{`Reading futher information `}<a parentName=\"p\" {...{\n        \"href\": \"https://mui.com/material-ui/customization/theming/#themeprovider\"\n      }}>{`https://mui.com/material-ui/customization/theming/#themeprovider`}</a></p>\n    <h2 {...{\n      \"id\": \"styled\"\n    }}>{`styled`}</h2>\n    <p>{`Most of developers write custom styles using makeStyles, creatStyles features, look likes:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`// file MyComponent.styles.tsx\nimport { makeStyles, createStyles, Theme } from '@metafox/ui/styles';\n\nconst useStyles = makeStyles(\n  (theme: Theme) =>\n    createStyles({\n      root: {},\n      header: {\n        display: 'flex',\n        alignItems: 'center',\n        color: theme.palette.primary.main,\n        marginBottom: theme.spacing(2)\n      }\n    }),\n  { name: 'MuiSideMenu' }\n);\n\nexport default useStyles;\n`}</code></pre>\n    <p>{`In component`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`// file MyComponent.tsx\nimport useStyles from './MyComponent.styles'\n\nconst MyComponent = ()=>{\n  const classes  = useStyles();\n\n  return (\n    <div className={classes.root}>\n      ... others class access here.\n    </div>);\n}\n\nControl className logic\n\nMost of developers control React className properties logic by \\`classnames\\` or \\`clsx\\` tools.\n\\`clsx\\` is choice of \\`Material-UI\\` team. I dont know why but we should not add others tools for the same features.\n\nFor more information you can check [trends](https://www.npmtrends.com/classnames-vs-clsx) and [clsx](https://github.com/lukeed/clsx)\n\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"variables\"\n    }}>{`Variables`}</h2>\n    <p>{`TBD by @sonh`}</p>\n    <h2 {...{\n      \"id\": \"add-mixins\"\n    }}>{`Add mixins`}</h2>\n    <p>{`TBD by @sonh`}</p>\n    <h2 {...{\n      \"id\": \"dark-mode-vs-light-mode\"\n    }}>{`Dark mode vs Light mode`}</h2>\n    <p>{`TBD by @sonh`}</p>\n    <h2 {...{\n      \"id\": \"theme-editor\"\n    }}>{`Theme Editor`}</h2>\n    <p>{`TBD by @sonh`}</p>\n    <h2 {...{\n      \"id\": \"guidelines\"\n    }}>{`Guidelines`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Separate styling to `}<inlineCode parentName=\"li\">{`*.styles.tsx`}</inlineCode></li>\n      <li parentName=\"ul\">{`Do not pass object to `}<inlineCode parentName=\"li\">{`useStyles`}</inlineCode></li>\n      <li parentName=\"ul\">{`TBD by @sonh`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"typescript\"\n    }}>{`Typescript`}</h2>\n    <p>{`In others to extends declaration, read futher `}<a parentName=\"p\" {...{\n        \"href\": \"https://material-ui.com/guides/typescript/#customization-of-theme\"\n      }}>{`Customization of theme`}</a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.typescriptlang.org/docs/handbook/declaration-merging.html#module-augmentation\"\n      }}>{`Module Augmentation`}</a></p>\n    <h1 {...{\n      \"id\": \"theming\"\n    }}>{`Theming`}</h1>\n    <p>{`Theming is the ability to systematically customize site look & feel to better reflect your productâ€™s brand such as color, spacing, round corner, shadow, background and typography.`}</p>\n    <p>{`@metafox provider MaterialUI ThemeProvider at RootContainer, developer can access add new variable to themes provider.`}</p>\n    <h2 {...{\n      \"id\": \"variables-1\"\n    }}>{`Variables`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// file /src/themes.tsx\nexport default {\n  status: {\n    color: '#dadada',\n    background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)'\n  }\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"hook\"\n    }}>{`Hook`}</h2>\n    <p>{`using `}<inlineCode parentName=\"p\">{`useTheme`}</inlineCode>{` in pure function to get theme variable`}</p>\n    <p>{`Examples`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import { useTheme } from '@metafox/core/theme';\n\nexport const MyComponent = () => {\n  const theme = useTheme();\n  return (\n    <span\n      style={{ background: theme.status.background, color: theme.status.color }}\n    >\n      Using Theme Variable\n    </span>\n  );\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"hoc\"\n    }}>{`HOC`}</h2>\n    <p>{`Examples`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import { withTheme } from '@metafox/core/theme';\n\nfunction DeepChildRaw(props) {\n  const theme = useTheme();\n  return (\n    <span\n      style={{ background: theme.status.background, color: theme.status.color }}\n    >\n      Using Theme Variable\n    </span>\n  );\n}\n\nconst DeepChild = withTheme(DeepChildRaw);\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"theme-questions\"\n    }}>{`Theme Questions`}</h2>\n    <ol>\n      <li parentName=\"ol\">{`How to add new custom fonts ?`}</li>\n      <li parentName=\"ol\">{`How to add more icon ?`}</li>\n      <li parentName=\"ol\">{`Use font icon vs svg icon ?`}</li>\n    </ol>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}