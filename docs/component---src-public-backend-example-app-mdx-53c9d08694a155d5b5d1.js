(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{wDlj:function(e,n,t){"use strict";t.r(n),t.d(n,"_frontmatter",(function(){return s})),t.d(n,"default",(function(){return p}));var r=t("Fcif"),a=t("+I+c"),o=(t("mXGw"),t("/FXl")),l=t("TjRS"),s=(t("aD51"),{});void 0!==s&&s&&s===Object(s)&&Object.isExtensible(s)&&!s.hasOwnProperty("__filemeta")&&Object.defineProperty(s,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/public/backend/example-app.mdx"}});var i={_frontmatter:s},c=l.a;function p(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(o.b)(c,Object(r.a)({},i,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"In this part, you will learn how to create new Blog package,\npackage vendor is ",Object(o.b)("inlineCode",{parentName:"p"},"company")," then full package name should be ",Object(o.b)("inlineCode",{parentName:"p"},"company/packages"))),Object(o.b)("h2",{id:"generate-files-skeleton"},"Generate Files Skeleton"),Object(o.b)("p",null,'The simple way to init a module is using admincp.\nvisit admincp at "/app" then follow wizard to create your first module'),Object(o.b)("p",null,"Let start by init schema structure"),Object(o.b)("h2",{id:"generate-database-schema"},"Generate Database Schema"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-bash"},"# create migration file\nphp artisan package:make-migration company/blog create_blog_schema\n")),Object(o.b)("p",null,"enter directory company/blog/src/Database/Migrations, open php file"),Object(o.b)("p",null,"You'll see a class with two method ",Object(o.b)("inlineCode",{parentName:"p"},"up")," and ",Object(o.b)("inlineCode",{parentName:"p"},"down"),"."),Object(o.b)("p",null,"Put create schema to ",Object(o.b)("inlineCode",{parentName:"p"},"up()")," and destroy schema to ",Object(o.b)("inlineCode",{parentName:"p"},"down()"),"."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-php"},"class CreateBlogTables extends Migration\n{\n    public function up()\n    {\n        if (!Schema::hasTable('blogs')) {\n            Schema::create('blogs', function (Blueprint $table) {\n                // Create table structure.\n            });\n        }\n    }\n\n    public function down()\n    {\n        Schema::dropIfExists('blogs');\n    }\n}\n")),Object(o.b)("h2",{id:"code-generator"},"Code Generator"),Object(o.b)("p",null,"Setup which files should be generated in company/blog/config/config.php"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-php"},"\nreturn [\n    'version'=> 'v1',\n    'models'  => [\n        // Model class name.\n        'Blog'          => [\n            'resource'    => [\n                'repository' => true, // Generate repository ?\n                'policy'     => true, // Generate policy ?\n                'response'   => true, // Generate json resource ?\n                'controller' => false, // Generate controller ?\n                'observer'   => false, // Generate observer ?\n                'request'    => false, // Generate request ?\n            ],\n            'table'       => 'blogs', // Table name in database\n            'entity_type' => 'blog', // Entity name\n            'graphql'     => false, // Generate GraphQL ?\n        ],\n    ]\n];\n")),Object(o.b)("p",null,"Then run the command:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-bash"},"php artisan normalize metafox/blog\n")),Object(o.b)("h2",{id:"model"},"Model"),Object(o.b)("h3",{id:"type"},"Type:"),Object(o.b)("p",null,"If Model is Content, implement:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"interface: ",Object(o.b)("strong",{parentName:"li"},"FoxSocial\\Platform\\Contracts\\Content")),Object(o.b)("li",{parentName:"ul"},"trait: ",Object(o.b)("strong",{parentName:"li"},"FoxSocial\\Platform\\Support\\HasContent"),".")),Object(o.b)("p",null,"If Model is User, implement:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"interface: ",Object(o.b)("strong",{parentName:"li"},"FoxSocial\\Platform\\Contracts\\User")),Object(o.b)("li",{parentName:"ul"},"trait: ",Object(o.b)("strong",{parentName:"li"},"FoxSocial\\Platform\\Support\\HasUser"),".")),Object(o.b)("h3",{id:"define-model-userowner"},"Define Model User/Owner:"),Object(o.b)("p",null,"If Model has user_id, user_type => use trait ",Object(o.b)("strong",{parentName:"p"},"FoxSocial\\Platform\\Traits\\Eloquent\\Model\\HasUserMorph"),"."),Object(o.b)("p",null,"If Model has owner_id, owner_type => use trait ",Object(o.b)("strong",{parentName:"p"},"FoxSocial\\Platform\\Traits\\Eloquent\\Model\\HasOwnerMorph"),"."),Object(o.b)("h3",{id:"privacy"},"Privacy"),Object(o.b)("p",null,"If Model has privacy and MUST has custom privacy (if not, skip this step), implement:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"interface: ",Object(o.b)("strong",{parentName:"li"},"FoxSocial\\Platform\\Support\\Eloquent\\Appends\\Contracts\\AppendPrivacyList")),Object(o.b)("li",{parentName:"ul"},"trait: ",Object(o.b)("strong",{parentName:"li"},"FoxSocial\\Platform\\Support\\Eloquent\\Appends\\AppendPrivacyListTrait"),".")),Object(o.b)("p",null,"This will give model two method ",Object(o.b)("strong",{parentName:"p"},"setPrivacyListAttribute")," and ",Object(o.b)("strong",{parentName:"p"},"getPrivacyListAttribute")," to set/get privacy list. Example:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-php"},"$blog = new Blog();\n$blog->setPrivacyListAttribute([1, 2, 3]);\nvar_dump($blog->getPrivacyListAttribute()); // print 1, 2, 3. If privacy != 4, it will return null.\n")),Object(o.b)("h3",{id:"create-feed"},"Create Feed:"),Object(o.b)("p",null,"If Model is Content, and Model can create Feed => implement interface ",Object(o.b)("strong",{parentName:"p"},"FoxSocial\\Platform\\Contracts\\ActivityFeedSource"),"."),Object(o.b)("p",null,"=> Method ",Object(o.b)("em",{parentName:"p"},"toActivityFeed")," will return a ",Object(o.b)("em",{parentName:"p"},"FeedAction")," instance, this is feed data before creating a feed. Making sure type_id is correct (see Settings)"),Object(o.b)("h3",{id:"stream"},"Stream"),Object(o.b)("p",null,"If Model can create Resource Stream (using for browse), implement interface ",Object(o.b)("strong",{parentName:"p"},"FoxSocial\\Platform\\Contracts\\HasResourceStream")),Object(o.b)("p",null,"First, we will define Blog Stream Model:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-php"},"namespace Modules\\Blog\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass PrivacyStream extends Model\n{\n    protected $table = 'blog_privacy_streams';\n\n    public $timestamps = false;\n\n    protected $fillable = [\n        'privacy_id',\n        'item_id',\n    ];\n}\n")),Object(o.b)("p",null,"Then in Blog Model, we define this relation:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-php"},"public function privacy_streams(): HasMany\n{\n    return $this->hasMany(PrivacyStream::class, 'item_id', 'id');\n}\n")),Object(o.b)("p",null,"Finally we will have a Blog Model looks like this:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-php"},"\nuse FoxSocial\\Platform\\Contracts\\Content;\nuse FoxSocial\\Platform\\Traits\\Eloquent\\Model\\HasUserMorph;\nuse FoxSocial\\Platform\\Traits\\Eloquent\\Model\\HasOwnerMorph;\nuse FoxSocial\\Platform\\Contracts\\ActivityFeedSource;\nuse FoxSocial\\Platform\\Contracts\\HasResourceStream;\n\nclass Blog extends Model implements Content, ActivityFeedSource, AppendPrivacyList, HasResourceStream;\n{\n    use HasContent;\n    use HasUserMorph;\n    use HasOwnerMorph;\n    use AppendPrivacyListTrait;\n\n    public const ENTITY_TYPE = 'blog'; // Always define ENTITY_TYPE.\n\n    public function toActivityFeed(): FeedAction\n    {\n        return new FeedAction([\n            'user_id'    => $this->userId(),\n            'user_type'  => $this->userType(),\n            'owner_id'   => $this->ownerId(),\n            'owner_type' => $this->ownerType(),\n            'item_id'    => $this->entityId(),\n            'item_type'  => $this->entityType(),\n            'type_id'    => 'blog_created',\n            'privacy'    => $this->privacy,\n        ]);\n    }\n\n    public function privacy_streams(): HasMany\n    {\n        return $this->hasMany(PrivacyStream::class, 'item_id', 'id');\n    }\n}\n\n")),Object(o.b)("h3",{id:"use-entity-name"},"Use Entity Name"),Object(o.b)("p",null,'Default Laravel will use class name: Modules\\Blog\\Models\\Blog. To use "blog" only, go to company/blog/src/Providers/ModuleServiceProvider and define in boot method.'),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-php"},"public function boot()\n{\n     Relation::morphMap([\n        Blog::ENTITY_TYPE => Blog::class,\n    ]);\n}\n")),Object(o.b)("h2",{id:"model-observer"},"Model observer"),Object(o.b)("p",null,"Go to company/blog/src/Providers/ModuleServiceProvider, define in boot method."),Object(o.b)("p",null,"Note if model is User or Content Type, you must register with global observer. Depend on abilities of Interface, Model will listen differently with platform process."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-php"},"class BlogServiceProvider extends ServiceProvider\n{\n    public function boot()\n    {\n         Blog::observe([\n            \\FoxSocial\\Platform\\Support\\EloquentModelObserver::class, // Global observer.\n            \\Modules\\Blog\\Observers\\BlogObserver::class, // Your own blog observer.\n         ]);\n    }\n}\n")),Object(o.b)("h2",{id:"module-settings"},"Module Settings"),Object(o.b)("p",null,"All app settings will be defined in company/blog/src/Listeners/ModuleSettingListener.php."),Object(o.b)("h3",{id:"define-module-name"},"Define Module Name"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-php"},"class ModuleSettingListener extends BaseModuleSettingListener implements ModuleSettingInterface\n{\n    public function getModuleName(): string\n    {\n        return 'company-blog'; // Name your module in here.\n    }\n}\n")),Object(o.b)("h3",{id:"setting-to-create-feed"},"Setting to create Feed"),Object(o.b)("p",null,"To make a Content Model can able to create Feed, define activity type below:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-php"},"class ModuleSettingListener extends BaseModuleSettingListener implements ModuleSettingInterface\n{\n    // ....\n\n    public function getActivityTypes(): array\n    {\n        return [\n            [\n                'type'            => 'blog_created', // This is the name of action.\n                'module_id'       => $this->getModuleName(),\n                'is_active'       => true,\n                'title'           => 'Blog Activity Type',\n                'description'     => 'Blog Activity Type Setting',\n                'is_system'       => 0,\n                'can_comment'     => true, // Ability to do actions on feed.\n                'can_like'        => true,\n                'can_share'       => true,\n                'can_edit'        => true,\n                'can_create_feed' => true,\n                'can_put_stream'  => true,\n            ],\n        ];\n    }\n}\n")),Object(o.b)("h3",{id:"add-resource-to-activity-form"},"Add Resource to Activity Form"),Object(o.b)("p",null,"In fox4 there is only Photo, Activity Post, Video. In fox5, we have this quick setting to add a resource to Activity Feed Form."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-php"},"class ModuleSettingListener extends BaseModuleSettingListener implements ModuleSettingInterface\n{\n    // ....\n\n    public function getActivityForm(): array\n    {\n        return [\n            Post::ENTITY_TYPE => [\n                // setting more here.\n            ],\n        ];\n    }\n}\n\n")),Object(o.b)("h3",{id:"setting-policy"},"Setting Policy."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-php"},"class ModuleSettingListener extends BaseModuleSettingListener implements ModuleSettingInterface\n{\n    // ....\n\n    public function getPolicies(): array\n    {\n        return [\n            Blog::class     => BlogPolicy::class,\n            Category::class => CategoryPolicy::class,\n        ];\n    }\n}\n")),Object(o.b)("h3",{id:"setting-user-permissions"},"Setting User Permissions."),Object(o.b)("p",null,'In fox5, we assign permissions to role in "tree". Example if you define UserRole::LEVEL_REGISTERED, then all roles from user register to all higher roles will have that permissions.'),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-php"},"class ModuleSettingListener extends BaseModuleSettingListener implements ModuleSettingInterface\n{\n    // ....\n    public function getUserPermissions(): array\n    {\n        return [\n            Blog::ENTITY_TYPE     => [\n                'view'     => UserRole::LEVEL_REGISTERED,\n                'create'   => UserRole::LEVEL_REGISTERED,\n                'update'   => UserRole::LEVEL_REGISTERED,\n                'delete'   => UserRole::LEVEL_REGISTERED,\n                'moderate' => UserRole::LEVEL_STAFF,\n                'feature'  => UserRole::LEVEL_REGISTERED,\n                'approve'  => UserRole::LEVEL_REGISTERED,\n                'sponsor'  => UserRole::LEVEL_REGISTERED,\n            ],\n        ];\n    }\n}\n")),Object(o.b)("p",null,"If you only want to assign role to specific role:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-php"},"\nreturn [\n    Blog::ENTITY_TYPE     => [\n        'specific-permission' => [UserRole::STAFF_USER]\n    ],\n];\n\n")),Object(o.b)("h3",{id:"site-setting"},"Site Setting"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-php"},"\nclass ModuleSettingListener extends BaseModuleSettingListener implements ModuleSettingInterface\n{\n    // ....\n\n    public function getSiteSettings(): array\n    {\n        return [\n            'blog_paging_mode' => false,\n        ];\n    }\n}\n\n")),Object(o.b)("h3",{id:"setting-user-privacy"},"Setting User Privacy"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"getUserPrivacy: define all profile settings."),Object(o.b)("li",{parentName:"ul"},"getUserPrivacyResource: define all settings (defined in getUserPrivacy methods) are used by resources. Example: you create setting Blog-A, then you want to apply it to page, group v.v... then you just define those in this method. You can set it own phrase too."),Object(o.b)("li",{parentName:"ul"},"getDefaultPrivacy: set default privacy of a resource."),Object(o.b)("li",{parentName:"ul"},"getProfileMenu: set sections can be viewed on user profile.")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-php"},"\nclass ModuleSettingListener extends BaseModuleSettingListener implements ModuleSettingInterface\n{\n    // ....\n\n    public function getUserPrivacy(): array\n    {\n        return [\n            'blog.share_blogs'       => [\n                'phrase'  => 'blog.phrase.user_privacy.who_can_share_blogs',\n                'default' => PhpfoxPrivacy::EVERYONE,\n            ],\n            'blog.view_browse_blogs' => [\n                'phrase'  => 'blog.phrase.user_privacy.who_can_view_blogs',\n                'default' => PhpfoxPrivacy::EVERYONE,\n            ],\n        ];\n    }\n\n    public function getUserPrivacyResource(): array\n    {\n        return [\n            'page'  => [\n                'blog.share_blogs',\n                'blog.view_browse_blogs',\n                'custom_seting' => 'custom_setting_phrase',\n            ],\n            'group' => [\n                'blog.share_blogs',\n            ],\n        ];\n    }\n\n    public function getDefaultPrivacy()\n    {\n        return [\n            Blog::ENTITY_TYPE => [\n                'phrase'  => 'blog.phrase.blogs',\n                'default' => PhpfoxPrivacy::EVERYONE,\n            ],\n            // set for more resources.\n            // ...\n        ];\n    }\n\n    public function getProfileMenu(): array\n    {\n        return [\n            Blog::ENTITY_TYPE => [\n                'phrase'  => 'blog.phrase.blogs',\n                'default' => PhpfoxPrivacy::EVERYONE,\n            ],\n            // set for more resources.\n            // ...\n        ];\n    }\n}\n\n")),Object(o.b)("h3",{id:"resource-names"},"Resource Names"),Object(o.b)("p",null,"We can have multiple resources:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-php"},"\nclass ModuleSettingListener extends BaseModuleSettingListener implements ModuleSettingInterface\n{\n    // ....\n\n    public function getItemTypes(): array\n    {\n        return [\n            Feed::ENTITY_TYPE,\n            Post::ENTITY_TYPE,\n            Share::ENTITY_TYPE,\n        ];\n    }\n}\n")),Object(o.b)("h2",{id:"repository"},"Repository"),Object(o.b)("p",null,"Repository can be extended from FoxSocial\\Platform\\Repositories\\AbstractRepository, in some case it may not. But a repository always need a repository interface."),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Location for repository interfaces: company/blog/src/Repositories;"),Object(o.b)("li",{parentName:"ul"},"Location for repository class: company/blog/src/Repositories/Eloquent;")),Object(o.b)("p",null,"Example:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-php"},"namespace Modules\\Blog\\Repositories\\Eloquent;\n\nuse FoxSocial\\Platform\\Repositories\\AbstractRepository;\nuse Modules\\Blog\\Repositories\\BlogRepositoryInterface;\n\nclass BlogRepository extends AbstractRepository implements BlogRepositoryInterface\n{\n    public function model(): string\n    {\n        return Blog::class;\n    }\n}\n")),Object(o.b)("p",null,"Go to company/blog/src/Providers/BlogServiceProvider and register (For detail please read about Repository Pattern)."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-php"},"use Modules\\Blog\\Repositories\\BlogRepositoryInterface;\nuse Modules\\Blog\\Repositories\\Eloquent\\BlogRepository;\n\nclass BlogServiceProvider extends ServiceProvider\n{\n    public function register()\n    {\n         $this->app->bind(BlogRepositoryInterface::class, BlogRepository::class);\n    }\n}\n")),Object(o.b)("h2",{id:"translation"},"Translation"),Object(o.b)("p",null,"Each folder is a language pack."),Object(o.b)("p",null,"company/blog/resources/lang - en\nphrase.php - vi\nphrase.php"),Object(o.b)("p",null,"Note: we did not support json file yet (will implement soon)."),Object(o.b)("p",null,"Example: company/blog/resources/lang/en/phrase.php"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-php"},"return [\n    'example_text' => 'Example text',\n    'group' => [\n        'example_text' => 'Group example text',\n    ]\n];\n\n")),Object(o.b)("p",null,"After change language, run:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-bash"},"php artisan phpfox:update\n")),Object(o.b)("p",null,"Usage: to use call module_name + file name + key (+ n key level)"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-php"},"echo __p('blog.phrase.example_text'); // it will print 'Example text'.\necho __p('blog.phrase.group.example_text'); // it will print 'Group Example text'.\n")),Object(o.b)("h2",{id:"resource"},"Resource"),Object(o.b)("p",null,"Like Fox4 Resource, go to company/src/Http/Resources/v1/Blog. You will see:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"BlogDetail: is resource when view detail."),Object(o.b)("li",{parentName:"ul"},"BlogEmbed: is embed object when view feed."),Object(o.b)("li",{parentName:"ul"},"BlogEmbedCollection: BlogEmbed list."),Object(o.b)("li",{parentName:"ul"},"BlogItem: is resource when view listing."),Object(o.b)("li",{parentName:"ul"},"BlogItemCollection: BlogItem list.")),Object(o.b)("p",null,"Example for BlogDetail:"),Object(o.b)("p",null,"We give you 3 trait helper:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"HasStatistic: give you method getStatistic()"),Object(o.b)("li",{parentName:"ul"},"HasExtra: give you method getExtra()"),Object(o.b)("li",{parentName:"ul"},"HasFeedParam: give you method getFeedParams()")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-php"},"\nuse FoxSocial\\Platform\\Traits\\Http\\Resources\\HasExtra;\nuse FoxSocial\\Platform\\Traits\\Http\\Resources\\HasFeedParam;\nuse FoxSocial\\Platform\\Traits\\Http\\Resources\\HasStatistic;\nuse Illuminate\\Http\\Resources\\Json\\JsonResource;\n\nclass BlogDetail extends JsonResource\n{\n    use HasExtra;\n    use HasStatistic;\n    use HasFeedParam;\n\n    public function toArray($request)\n    {\n        'id'                => $this->resource->id,\n        'module_name'       => $this->resource->entityType(),\n        'resource_name'     => $this->resource->entityType(),\n\n        // Other attributes.\n        'statistic'         => $this->getStatistic(),\n        'extra'             => $this->getExtra(),\n        'feed_param'        => $this->getFeedParams(),\n\n        // Custom attributes.\n        'custom-attribute'  => 'abc'\n    }\n}\n")),Object(o.b)("h2",{id:"form-request"},"Form Request"),Object(o.b)("p",null,"Like Fox4 Form, go to company/src/Http/Requests/v1/Blog. You will see some default request like IndexRequest, StoreRequest, UpdateRequest."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-php"},"\nclass StoreRequest extends FormRequest\n{\n    // Form rules.\n    public function rules()\n    {\n        return [\n            'post_type'         => ['required'],\n            'privacy'           => ['sometimes', new PrivacyRule()],\n            'post_as_parent'    => ['sometimes', 'exists:user_entities,id'],\n            'tagged_friends'    => ['sometimes', 'array'],\n            'location'          => [\n                'sometimes', 'array',\n            ],\n            'location.address'  => 'string',\n            'location.lat'      => 'numeric',\n            'location.lng'      => 'numeric',\n        ];\n    }\n\n    // If you want to custom attributes after validated success, use this method.\n    public function validated()\n    {\n        $data = parent::validated();\n\n        if (empty($data['post_as_parent'])) {\n            $data['post_as_parent'] = Auth::id();\n        }\n\n        if (!isset($data['privacy'])) {\n            $data['privacy'] = PhpfoxPrivacy::EVERYONE;\n        }\n\n        return $data;\n    }\n}\n")),Object(o.b)("h2",{id:"api"},"Api"),Object(o.b)("p",null,"Go to company/blog/src/Http/Controllers/Api, you will see some Controller. It's Gateway Controller for multiple API versions."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-php"},"\nnamespace Modules\\Blog\\Http\\Controllers\\Api;\n\nuse FoxSocial\\Platform\\Http\\Controllers\\Api\\GatewayController;\n\n/**\n * --------------------------------------------------------------------------\n *  Api Gateway\n * --------------------------------------------------------------------------\n *\n * This class solve api versioning problem.\n * DO NOT IMPLEMENT ACTION HERE.\n */\n\n/**\n * Class CategoryController\n * @package Modules\\Blog\\Http\\Controllers\\Api\n */\nclass BlogController extends GatewayController\n{\n    protected $controllers = [\n        'v1'   => v1\\BlogController::class,\n        // Define many Controllers as you want here.\n    ];\n\n    // DO NOT IMPLEMENT ACTION HERE.\n}\n\n")),Object(o.b)("p",null,"In each version, example v1, you will create a folder v1 and create a BlogController."),Object(o.b)("p",null,"You MUST extend from Platform's ApiController."),Object(o.b)("p",null,"You need to create a repository instance, must create by interface. For detail please read Dependence Injection."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-php"},"namespace Modules\\Blog\\Http\\Controllers\\Api\\v1;\n\nuse FoxSocial\\Platform\\Http\\Controllers\\Api\\ApiController;\nuse Modules\\Blog\\Repositories\\BlogRepositoryInterface;\nuse Modules\\Blog\\Http\\Requests\\v1\\Blog\\IndexRequest;\nuse Modules\\Blog\\Http\\Resources\\v1\\Blog\\BlogItemCollection;\n\nclass BlogController extends ApiController\n{\n    public $repository;\n\n    public function __construct(BlogRepositoryInterface $repository)\n    {\n        $this->repository = $repository;\n    }\n\n    public function store(StoreRequest $request)\n    {\n        // Use this method to get form data.\n        $params = $request->validated();\n\n        // Use this to get context user. Note: making sure whether this action is authenticated or not. If not, do not use this.\n        $user = Auth::user();\n\n        // Post to where?\n        $owner = $params['post_as_parent'] ? UserEntity::getById($params['post_as_parent'])->detail : $user;\n\n        // Best practice: when creating a Content, should always define data => post from who => post to who.\n        $blog = $this->repository->createBlog($params, $user, $owner);\n\n        // After get data, populate it into Resource.\n        return new Detail($blog);\n    }\n}\n\n")),Object(o.b)("h2",{id:"scope"},"Scope"),Object(o.b)("p",null,"If you want to query Blog by custom query, how to implement? Do not write any custom query inside Blog Model."),Object(o.b)("p",null,"Go to company/blog/src/Scopes and create ExampleScope"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-php"},"\nuse Illuminate\\Database\\Eloquent\\Scope;\nuse Illuminate\\Database\\Eloquent\\Builder;\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass ExampleScope implements BaseScope\n{\n    private $example;\n\n    public function setExample($data)\n    {\n        $this->example = $data;\n    }\n\n    public function getExample()\n    {\n        return $this->example;\n    }\n\n    public function apply(Builder $builder, Model $model)\n    {\n        $builder->where('example_column', '=', $this->getExample());\n    }\n}\n\n")),Object(o.b)("p",null,"Usage:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-php"},"\n$yourScope = new ExampleScope();\n$yourScope->setExample('123');\n\n$blog = new Blog();\n$query = $blog->newQuery()->addScope($yourScope);\n$query->limit(1);\n$data = $query->get();\n\n")),Object(o.b)("h3",{id:"platform-scopes"},"Platform Scopes"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"FoxSocial\\Platform\\Support\\Browse\\Scopes\\PrivacyScope")),Object(o.b)("p",null,"This scope will help you query blog with blog stream."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-php"},"\n$privacyScope = new PrivacyScope();\n$privacyScope->setUserId(1);\n\n")),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"FoxSocial\\Platform\\Support\\Browse\\Scopes\\SortScope")),Object(o.b)("p",null,"This scope will help you sort your Blog.php"),Object(o.b)("p",null,"Support: recent, most_viewed, most_liked, most_discussed."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-php"},"$sortScope = new SortScope();\n$sortScope->setSort('recent') // Or use constant \\FoxSocial\\Platform\\Support\\Browse::SORT_RECENT\n    ->setSortType('desc'); // asc or desc.\n")),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"FoxSocial\\Platform\\Support\\Browse\\Scopes\\WhenScope")),Object(o.b)("p",null,"This scope will help you query your Blog by time."),Object(o.b)("p",null,"Support: all, this_month, this_week, today. Default: all."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-php"},"\n$whenScope = new WhenScope();\n$whenScope->setWhen('this_month'); // Or use constant \\FoxSocial\\Platform\\Support\\Browse::WHEN_THIS_MONTH\n\n")),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"If you want override platform Scope:")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-php"},"namespace Modules\\Photo\\Support\\Browse\\Scopes\\Album;\n\nclass SortScope extends \\FoxSocial\\Platform\\Support\\Browse\\Scopes\\SortScope\n{\n    public const SORT_MOST_PHOTO = 'most_photo';\n\n    public function apply(Builder $builder, Model $model)\n    {\n        parent::apply($builder, $model);\n\n        $table = $model->getTable();\n        $sort = $this->getSort();\n        $sortType = $this->getSortType();\n\n        if ($sort == self::SORT_MOST_PHOTO) {\n            $builder->orderBy($this->alias($table, 'total_photo'), $sortType);\n            $builder->orderBy($this->alias($table, 'id'), $sortType);\n        }\n    }\n}\n\n")),Object(o.b)("p",null,"Usage:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-php"},"\n$sortScope = new  \\Modules\\Photo\\Support\\Browse\\Scopes\\Album\\SortScope();\n$sortScope->setSort('recent');\n")),Object(o.b)("h2",{id:"permissions"},"Permissions"),Object(o.b)("p",null,"To check permission:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-php"},"$user->hasPermissionTo('blog.create');\nAuth::user()->hasPermissionTo('blog.create');\n")),Object(o.b)("h2",{id:"privacy-1"},"Privacy"),Object(o.b)("p",null,"To check privacy, you should rely on:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"core_privacy:"),Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},"Everyone: privacy_id = 1. It's privacy of sitewide. It's like a constant. Use directly is ok."),Object(o.b)("li",{parentName:"ul"},"Friends: per User will have a privacy with privacy_type = user_friends and privacy = 1"),Object(o.b)("li",{parentName:"ul"},"Only Me: per User will have a privacy with privacy_type = user_private and privacy = 3"),Object(o.b)("li",{parentName:"ul"},"Custom Privacy: an User can have unlimited custom privacy. Example if you created a friend list id = 1.\nYou will have a privacy record with: item_id = 1, item_type = friend_list, privacy = 4, privacy_type = user_friend_list."))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"core_privacy_members: user_id, privacy_id"),Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},"To define user_id = 1 can see privacy Friends of user 2 or not:",Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},"Find privacy_id of User 2 with user_private = user_friends, example privacy_id = 100. If we have record user_id = 1, privacy_id = 100 => user 1 has ability to view privacy_id 100."))),Object(o.b)("li",{parentName:"ul"},"Note: owner of a privacy will always has a record in this table."))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"core_privacy_streams: id, privacy_id, item_id, item_type"),Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},"Stored privacy of items."),Object(o.b)("li",{parentName:"ul"},"If Item have x privacy custom friend list, Item will have x stream records."))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"blog_privacy_streams: your module stream. It's a children of core_privacy_streams."))),Object(o.b)("h3",{id:"easier-way-browse-stream"},"Easier way: browse stream."),Object(o.b)("p",null,"As mentioned above, FoxSocial\\Platform\\Support\\Browse\\Scopes\\PrivacyScope can take this logic, just feel free to use it."),Object(o.b)("h2",{id:"userprivacy"},"UserPrivacy"),Object(o.b)("p",null,"It's user privacy settings."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-php"},"UserPrivacy::hasAccess($user->entityId(), $owner->entityId(), 'profile.view_profile')\n")),Object(o.b)("h2",{id:"policy"},"Policy"),Object(o.b)("p",null,"Policy is AccessControl in Fox4. Go to company/blog/src/Policies you will see something like BlogPolicy"),Object(o.b)("p",null,"Example to check can able to create Blog, we will combine Permission, Privacy, User Privacy."),Object(o.b)("p",null,"Always check 5 levels."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-php"},"use FoxSocial\\Platform\\Support\\Facades\\PrivacyPolicy;\nuse Modules\\User\\Support\\Facades\\UserPrivacy;\nuse FoxSocial\\Platform\\Facades\\Settings;\nuse Modules\\Blog\\Models\\Blog;\nuse FoxSocial\\Platform\\Contracts\\Content as Resource;\nuse FoxSocial\\Platform\\Contracts\\User as User;\n\nclass BlogPolicy\n{\n    protected string $type = Blog::class;\n\n    public function view(User $user, Content $resource) {\n\n        // 1. Check role/permission.\n        if (!$user->hasPermissionTo('blog.view')) {\n            return false;\n        }\n\n        $owner = $resource->owner;\n\n        // 2. Check can view on owner.\n        if (!PrivacyPolicy::checkPermissionOwner($user, $owner)) {\n            return false;\n        }\n\n        // 3. Check owner user privacy setting of resource. Example: can_view_blog_on_owner\n        if (UserPrivacy::hasAccess($user->entityId(), $owner->entityId(), 'blog.can_view_blog_on_owner') == false) {\n            return false;\n        }\n\n        // 4. Check resource setting.\n        if ($resource->is_pending == true) {\n            if (Settings::get('blog.can_view_pending') == false) {\n                return false;\n            }\n        }\n\n        // 4.1 Or setting can be disable resource privacy.\n        if (Settings::get('blog.privacy_enabled') == true) {\n            return true;\n        }\n\n        // 5. Check can view on resource.\n        if (PrivacyPolicy::checkPermission($user, $resource) == false) {\n            return false;\n        }\n\n        return true;\n    }\n}\n")),Object(o.b)("h2",{id:"feature-sponsor-approve"},"Feature, Sponsor, Approve"),Object(o.b)("p",null,"Model"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-php"},"use FoxSocial\\Platform\\Contracts\\HasApprove;\nuse FoxSocial\\Platform\\Contracts\\HasFeature;\nuse FoxSocial\\Platform\\Contracts\\HasSponsor;\n\nclass Photo extends Model implements Content, HasFeature, HasSponsor,HasApprove\n{\n  // ....\n}\n")),Object(o.b)("p",null,"RepositoryInterface"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-php"},"use FoxSocial\\Platform\\Contracts\\HasApprove;\nuse FoxSocial\\Platform\\Contracts\\HasFeature;\nuse FoxSocial\\Platform\\Contracts\\HasSponsor;\n\ninterface PhotoRepositoryInterface\n{\n    /**\n     * @param int $id\n     * @param int $feature\n     *\n     * @return bool\n     */\n    public function feature(int $id, int $feature): bool;\n\n    /**\n     * @param HasFeature $model\n     *\n     * @return bool\n     */\n    public function isFeature(HasFeature $model): bool;\n\n    /**\n     * @param int $limit\n     *\n     * @return Paginator\n     */\n    public function findFeature(int $limit = 4): Paginator;\n\n    /**\n     * @param int $id\n     * @param int $sponsor\n     *\n     * @return bool\n     */\n    public function sponsor(int $id, int $sponsor): bool;\n\n    /**\n     * @param HasSponsor $model\n     *\n     * @return bool\n     */\n    public function isSponsor(HasSponsor $model): bool;\n\n    /**\n     * @param int $limit\n     *\n     * @return Paginator\n     */\n    public function findSponsor(int $limit = 4): Paginator;\n\n    /**\n     * @param int $id\n     *\n     * @return bool\n     */\n    public function approve(int $id): bool;\n\n    /**\n     * @param HasApprove $model\n     *\n     * @return bool\n     */\n    public function isPending(HasApprove $model): bool;\n}\n")),Object(o.b)("p",null,"Repository"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-php"},"namespace Modules\\Photo\\Repositories\\Eloquent;\n\nuse FoxSocial\\Platform\\Support\\Repository\\HasFeatured;\nuse FoxSocial\\Platform\\Support\\Repository\\HasSponsor;\nuse FoxSocial\\Platform\\Support\\Repository\\HasApprove;\n\nclass PhotoRepository extends AbstractRepository implements PhotoRepositoryInterface\n{\n    use HasFeatured;\n    use HasSponsor;\n    use HasApprove;\n    // ....\n}\n")),Object(o.b)("p",null,"Policy"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-php"},"class PhotoPolicy\n{\n /**\n     * Determine whether the user can feature the model.\n     *\n     * @param User     $user\n     * @param resource $resource\n     * @param int|null $featureUpdateValue\n     *\n     * @return bool\n     */\n    public function feature(User $user, Resource $resource, int $featureUpdateValue = null): bool\n    {\n        if ($resource instanceof HasFeature) {\n            if ($featureUpdateValue != null) {\n                if ($featureUpdateValue == $resource->is_featured) {\n                    return false;\n                }\n            }\n\n            if ($user->hasPermissionTo('photo.feature')) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n     /**\n     * Determine whether the user can sponsor the model.\n     *\n     * @param User     $user\n     * @param resource $resource\n     * @param int|null $sponsorUpdateValue\n     *\n     * @return bool\n     */\n    public function sponsor(User $user, Resource $resource, int $sponsorUpdateValue = null): bool\n    {\n        if ($resource instanceof HasSponsor) {\n            if ($sponsorUpdateValue != null) {\n                if ($sponsorUpdateValue == $resource->is_sponsor) {\n                    return false;\n                }\n            }\n\n            if ($user->hasPermissionTo('photo.sponsor')) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Determine whether the user can approve the model.\n     *\n     * @param User          $user\n     * @param resource|null $resource $resource\n     *\n     * @return bool\n     */\n    public function approve(User $user, Resource $resource = null): bool\n    {\n        if ($resource instanceof HasApprove) {\n            if (Photo::IS_APPROVED == $resource->is_approved) {\n                return false;\n            }\n        }\n\n        if (!$user->hasPermissionTo('photo.approve')) {\n            return false;\n        }\n\n        return true;\n    }\n}\n")),Object(o.b)("h2",{id:"text"},"Text"),Object(o.b)("p",null,"Separate Content Model with Content Model's Text. Example: Blog and BlogText (blog_id, text, text_parsed)."),Object(o.b)("h3",{id:"verify-content-before-saving-to-database"},"Verify content before saving to database"),Object(o.b)("p",null,"FoxSocial\\Platform\\Support\\Parse\\Input"),Object(o.b)("p",null,"Feel free to improve this class."),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"prepare(string \\$text):")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-php"},"parse_input()->prepare('text');\n// or\nresolve(Input::class)->prepare('text');\n")),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"clean(string $string, int $limit)")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-php"},"parse_input()->clean('text', 2);\n// or\nresolve(Input::class)->clean('text', 2);\n")),Object(o.b)("h2",{id:"categorize"},"Categorize"),Object(o.b)("p",null,"A Content sometimes has category .... ","[TBD]"),Object(o.b)("h2",{id:"unit-test"},"Unit Test"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"All tests MUST be in company/blog/tests/Unit.")))}void 0!==p&&p&&p===Object(p)&&Object.isExtensible(p)&&!p.hasOwnProperty("__filemeta")&&Object.defineProperty(p,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/public/backend/example-app.mdx"}}),p.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-public-backend-example-app-mdx-53c9d08694a155d5b5d1.js.map