{"version":3,"sources":["webpack:///../src/public/backend/contentable.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"yPAQaA,G,UAAe,S,oNAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,kBACE,GAAM,eADR,eAGA,gGACA,gGACA,uBAAK,oBAAMC,WAAW,MAClB,UAAa,gBADZ,0+BAuDL,kBACE,GAAM,uBADR,uBAGA,2JACA,+IACA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBADZ,2bAyBL,8BACA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBADZ,yJ,kNAgBTJ,EAAWK,gBAAiB","file":"component---src-public-backend-contentable-mdx-a6ce665caca768641895.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/namnv/Sites/foxsocial/metafox-dev-docs/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"contentable\"\n    }}>{`Contentable`}</h1>\n    <p>{`This is an interface of a Contract Content. Example: Blog, Photo v.v...`}</p>\n    <p>{`A Contract Content always has user_id, user_type, owner_id, owner_type.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`\nnamespace FoxSocial\\\\Platform\\\\Contracts;\n\nuse Illuminate\\\\Database\\\\Eloquent\\\\Builder;\nuse Illuminate\\\\Database\\\\Eloquent\\\\Model;\nuse Illuminate\\\\Database\\\\Eloquent\\\\Relations\\\\BelongsTo;\nuse Illuminate\\\\Database\\\\Eloquent\\\\Relations\\\\MorphTo;\nuse Illuminate\\\\Support\\\\Collection;\n\ninterface Content extends Entity\n{\n    /**\n     * @return int\n     */\n    public function userId(): int;\n\n    /**\n     * @return string\n     */\n    public function userType(): string;\n\n    /**\n     * @return int\n     */\n    public function ownerId(): int;\n\n    /**\n     * @return string\n     */\n    public function ownerType(): string;\n\n    /**\n     * @return User|MorphTo\n     */\n    public function user();\n\n    /**\n     * @return UserEntity|BelongsTo\n     */\n    public function userEntity();\n\n    /**\n     * @return User|MorphTo\n     */\n    public function owner();\n\n    /**\n     * @return UserEntity|BelongsTo\n     */\n    public function ownerEntity();\n}\n\n`}</code></pre>\n    <h1 {...{\n      \"id\": \"hasnestedattributes\"\n    }}>{`HasNestedAttributes`}</h1>\n    <p>{`Platform provides a trait to support quick saving relation data: FoxSocial\\\\Platform\\\\Traits\\\\Eloquent\\\\Model\\\\HasNestedAttributes`}</p>\n    <p>{`Example if you has Blog, Blog Category, Blog Tags. To quick save, define nestedAttributes the same name with relation.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`use FoxSocial\\\\Platform\\\\Traits\\\\Eloquent\\\\Model\\\\HasNestedAttributes;\n\nclass Blog extends Model implements Content\n{\n    use HasNestedAttributes;\n\n    public $nestedAttributes = [\n        'categories',\n        'blog_text' => ['text', 'text_parsed'],\n    ];\n\n    public function categories(): BelongsToMany\n    {\n        // relation.\n    }\n\n    public function blog_text(): HasOne\n    {\n        // relation\n    }\n}\n\n`}</code></pre>\n    <p>{`Usage`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`$blog = new Blog();\n$blog->fill([\n    'title' => 'abc',\n    'categories' => [1, 2, 3],\n    'blog_text' => [\n\n    ]\n])\n$blog->save();\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}