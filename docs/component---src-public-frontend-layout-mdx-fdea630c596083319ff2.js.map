{"version":3,"sources":["webpack:///../src/public/frontend/layout.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---src-public-frontend-layout-mdx-fdea630c596083319ff2.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/namnv/Sites/foxsocial/metafox-dev-docs/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h2 {...{\n      \"id\": \"comments\"\n    }}>{`Comments`}</h2>\n    <p>{`phpFox build system scan code to check declaration.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`/**\n * @type: itemView\n * name: blog.itemView.mainCard\n * keywords: blog\n * description:\n * previewImage:\n * deps:\n * priority: sort orthers.\n */\n`}</code></pre>\n    <p>{`@type:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`itemView`}</inlineCode>{`: Declare grid/list item view component.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`embedView`}</inlineCode>{`: Declare embedView in feed/notification/search embed view component.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`block`}</inlineCode>{`: Declare configurably block view component.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`saga`}</inlineCode>{`: Declare redux saga effects.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`reducer`}</inlineCode>{`: Declare redux reducer function.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"filename\"\n    }}>{`Filename`}</h2>\n    <p>{`file types:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`messages.json: Declare translation objects.`}</li>\n      <li parentName=\"ul\">{`layouts.json: Declare layout configuration objects.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"naming\"\n    }}>{`Naming`}</h2>\n    <p>{`Export Component Naming`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Item view: `}{`[resource_type]`}{`.itemView.`}{`*`}{`, etc: blog.itemView.mainCard, blog.itemView.smallFlat`}</li>\n      <li parentName=\"ul\">{`Embed item view: `}{`[resource_type]`}{`.embedView.`}{`*`}{`, etc: blog.embedItem.basic`}</li>\n      <li parentName=\"ul\">{`Form Field: form.field.`}{`[name]`}{`: etc: form.field.text, form.field.upload`}</li>\n      <li parentName=\"ul\">{`Block Component: `}{`[module_name]`}{`.block.`}{`[name]`}{`, etc: core.block.listview`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"layout-size\"\n    }}>{`Layout Size`}</h2>\n    <p>{`Layout configrations are seprarated by viewport sizes:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`<=375: xxsmall`}</li>\n      <li parentName=\"ul\">{`<=480 : xsmall`}</li>\n      <li parentName=\"ul\">{`<=767 : small`}</li>\n      <li parentName=\"ul\">{`<=991 : medium`}</li>\n      <li parentName=\"ul\">{`<=1199: large`}</li>\n      <li parentName=\"ul\">{`>`}{`= 1200: xlarge`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`How to detect layout variants`}</strong></p>\n    <p>{`Image that users is view user.profile page in `}<inlineCode parentName=\"p\">{`medium`}</inlineCode>{` viewport size, but administrators had not define particular layout configuration.\nLayout service will check size variants from up to down size priority: `}<inlineCode parentName=\"p\">{`medium`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`small`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`xsmall`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`xxsmall`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`large`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`xlarge`}</inlineCode>{`.`}</p>\n    <p>{`Check detail of selection:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`xxsmall: xxsmall, xsmall, small, medium, large, xlarge`}</li>\n      <li parentName=\"ul\">{`xsmall: xsmall, xxsmall, small, medium, large, xlarge`}</li>\n      <li parentName=\"ul\">{`small: small, xsmall, xxsmall, medium, large, xlarge`}</li>\n      <li parentName=\"ul\">{`medium: medium, small, xsmall, xxsmall, large, xlarge`}</li>\n      <li parentName=\"ul\">{`large: large, medium, small, xsmall, xxsmall, xlarge`}</li>\n      <li parentName=\"ul\">{`xlarge: xlarge, large, medium, small, xsmall, xxsmall`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`When to detect layout size variants`}</strong></p>\n    <p>{`For performance reasons, layout size variants will at page start rendering time, It means layout does not apply when user resize viewport.`}</p>\n    <h2 {...{\n      \"id\": \"layout-elements\"\n    }}>{`Layout Elements`}</h2>\n    <h3 {...{\n      \"id\": \"block\"\n    }}>{`Block`}</h3>\n    <p>{`A Block is a react component that site administrators can add/remove/configure/drag-drop to layout `}<inlineCode parentName=\"p\">{`slot`}</inlineCode></p>\n    <h3 {...{\n      \"id\": \"slot\"\n    }}>{`Slot:`}</h3>\n    <p>{`A slot is area which site administrators can put block,`}</p>\n    <p>{`Slot can contain others slot.`}</p>\n    <h4 {...{\n      \"id\": \"actions\"\n    }}>{`actions:`}</h4>\n    <h5 {...{\n      \"id\": \"resize\"\n    }}>{`Resize`}</h5>\n    <p>{`Resize a slot for responsive viewport size as small, medium, and more.`}</p>\n    <h5 {...{\n      \"id\": \"split\"\n    }}>{`Split`}</h5>\n    <p>{`Split a slot into vertical direction. It's is not usually but requiredment to build complex layout.`}</p>\n    <h5 {...{\n      \"id\": \"add-slot\"\n    }}>{`Add Slot`}</h5>\n    <p>{`Add others siblings slot in start/end of current slot.`}</p>\n    <h3 {...{\n      \"id\": \"section\"\n    }}>{`Section`}</h3>\n    <p>{`Section similar to material-ui Container component, it's define a row in layouts.`}</p>\n    <h4 {...{\n      \"id\": \"actions-1\"\n    }}>{`actions:`}</h4>\n    <h5 {...{\n      \"id\": \"settings\"\n    }}>{`Settings`}</h5>\n    <p><strong parentName=\"p\">{` maxWidth `}</strong></p>\n    <p>{`Values: 'lg'| 'md'| 'sm'| 'xl'| 'xs'| false`}</p>\n    <p>{`Determine the max-width of the container. The container width grows with the size of the screen. Set to false to disable maxWidth.`}</p>\n    <p><strong parentName=\"p\">{` disableGutters `}</strong></p>\n    <p>{`If true, the left and right padding is removed.`}</p>\n    <h5 {...{\n      \"id\": \"remove\"\n    }}>{`Remove`}</h5>\n    <h5 {...{\n      \"id\": \"add-new-slot\"\n    }}>{`Add new slot`}</h5>\n    <h3 {...{\n      \"id\": \"item-view\"\n    }}>{`Item View`}</h3>\n    <p>{`Item View is a component that implements UI for a single item in a listing block, etc: featured members, activity feeds:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`// file blog/src/components/BlogItemView.tsx\nexport type BlogItemShape = {\n  title: string;\n  description: string;\n} & ItemShape;\n\nconst BlogItemView = ({ item, itemProps }: ItemViewProps<BlogItemShape>) => {\n  const to = \\`/blog/view/\\${item.id}\\`;\n  const classes = useStyles();\n  const cover = /string/i.test(typeof item.image)\n    ? item.image\n    : item.image['500'];\n\n  const [control, state] = useActionControl<{}>(item, {\n    menuOpened: false\n  });\n\n  return (\n    <div className={classes.root}>\n      <div className={classes.outer}>\n        <Link to={to} className={classes.media}>\n          <span\n            className={classes.mediaBg}\n            style={{ backgroundImage: \\`url(\\${cover})\\` }}\n          />\n        </Link>\n        <div className={classes.inner}>\n          <div className={classes.header}>\n            <Link to={to} className={classes.title}>\n              {item.title}\n            </Link>\n            <ItemActionMenu state={state} handleAction={control} />\n          </div>\n          <p>{item.description}</p>\n          <Statistic\n            values={item.statistic}\n            display={'total_like,total_view'}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default BlogItemView;\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`// file blog/src/views.tsx\nimport BlogItemView from './components/BlogItemView';\nexport default {\n  'blog.itemView.card': BlogItemView\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"loading-skeleton\"\n    }}>{`Loading Skeleton`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`// file blog/src/components/BlogItemView.tsx\n\nconst LoadingSkeleton = ({ itemProps }) => {\n  const classes = useStyles();\n  return (\n    <div className={classes.root}>\n      <div className={classes.outer}>\n        <div className={classes.media}>\n          <Skeleton variant=\"rect\" height={120} component={'div'} />\n        </div>\n        <div className={classes.inner}>\n          <Skeleton />\n          <Skeleton />\n          <Skeleton />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nBlogItemView.LoadingSkeleton = LoadingSkeleton;\n\nexport default BlogItemView;\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"listing-block\"\n    }}>{`Listing Block`}</h2>\n    <p>{`In most case, You will create new block components by extends other block`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import createBlock from '@metafox/core/createBlock';\nimport { ListViewBlockProps } from '@metafox/core/types';\n\nconst BlogListingBlock = createBlock<ListViewBlockProps>({\n  extendBlock: 'core.block.listview', // extend from block\n  name: 'BlogListingBlock', // based Block compoinent\n  overrides: {\n    // override properties automacally merged to targed component\n    contentType: 'blog', // layout editor will load view prefix by \\`contentType.itemView.*\\` to select itemView.\n    dataSource: { apiUrl: '/blog' }\n  },\n  defaults: {\n    // default properties show in layout editor,\n    // only property show in defaults AND NOT in overrides will be show in editor.\n    title: 'Blogs',\n    blockProps: { variant: 'contained' },\n    itemView: 'blog.itemView.mainCard',\n    gridContainerProps: { spacing: 2 },\n    gridItemProps: { xs: 12, sm: 12, md: 12, lg: 12, xl: 12 }\n  }\n});\n\nexport default BlogListingBlock;\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"side-menu-block\"\n    }}>{`Side Menu Block`}</h2>\n    <p>{`Create a side menu block`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import createBlock from '@metafox/core/createBlock';\nimport { SideMenuBlockProps as Props } from '@metafox/core/types';\n\nconst BlogSideMenuBlock = createBlock<Props>({\n  extendBlock: 'core.block.sideNavigation',\n  name: 'BlogSideMenuBlock',\n  displayName: 'Blog Menu',\n  keywords: 'blogs, navigation, menu',\n  description: '',\n  previewImage: '',\n  overrides: {\n    menuItems: [\n      {\n        to: '/blog',\n        label: 'All Blogs',\n        active: true\n      },\n      {\n        to: '/blog?view=my',\n        label: 'My Blogs'\n      },\n      {\n        to: '/blog?view=friend',\n        label: \"Friend's Blogs\"\n      }\n    ]\n  },\n  defaults: {\n    title: 'Blogs',\n    blockProps: { variant: 'plained', noHeader: true, noFooter: false }\n  }\n});\n\nexport default BlogSideMenuBlock;\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"side-category\"\n    }}>{`Side Category`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import createBlock from '@metafox/core/createBlock';\nimport { CategoryBlockProps } from '@metafox/core/types';\n\nconst SideCategoryBlock = createBlock<CategoryBlockProps>({\n  extendBlock: 'core.categoryBlock', // based Block compoinent\n  name: 'BlogCategoryBlock', // React component name\n  displayName: 'Blog Categories', // display in layout editor\n  keywords: 'blogs, category', // keyword to search on layout editor\n  description: '', // description in layout editor\n  previewImage: '', // preview image in layout editor 200x200\n  overrides: {\n    // overrides properties will apply to derived blog automacally.\n    dataSource: { apiUrl: '/blog-category', apiParams: '' },\n    href: '/blog/category'\n  },\n  defaults: {\n    // properties will show in edit block modal.\n    title: 'Categories',\n    blockProps: { variant: 'plained' }\n  }\n});\n\nexport default SideCategoryBlock;\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"modal\"\n    }}>{`Modal`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`<Link to={'/m/example/simple-modal'}>/m/example/simple-modal</Link>\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}