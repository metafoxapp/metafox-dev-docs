{"version":3,"sources":["webpack:///../src/public/backend/concepts.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---src-public-backend-concepts-mdx-a496647966b5bfa11dfa.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/phongbn/Documents/Sites/mfdocs-dev/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"concepts\"\n    }}>{`Concepts`}</h1>\n    <p>{`This document explain platform concepts, it's helpful for developers base knowledge\nabout platform.`}</p>\n    <p>{`The implementation guide will be described in other parts.`}</p>\n    <h2 {...{\n      \"id\": \"model\"\n    }}>{`Model`}</h2>\n    <p>{`When we store data to database, it's a record.`}</p>\n    <p>{`When we map a record of database to php class (using Eloquent) it's be come a Model.`}</p>\n    <p>{`When we present a model to frontend (via controller) model becomes resource.`}</p>\n    <p>{`sometimes you hear about entity but there are a diffence between resource vs entity.`}</p>\n    <p>{`Both resource and entity has their types.`}</p>\n    <p>{`Resources are unique to their type while entities are not.`}</p>\n    <h2 {...{\n      \"id\": \"user-vs-content\"\n    }}>{`User vs Content`}</h2>\n    <p>{`When surfacing @metafox`}</p>\n    <p>{`blogs, videos, photo, .... has detail page.\nUsers can comment, share, like, ... on their detail page.`}</p>\n    <p>{`Friends list, saved, report item, ... has no detail page.\nUsers can not coment, share, like to these items.`}</p>\n    <p>{`User, Pages, Groups have it's profile pages (detail page), activity stream, privacy settings, and owner of other blogs, videos, ... etc`}</p>\n    <p>{`In order to abstract types of theme into programing concepts, we categorize theme into `}<strong parentName=\"p\">{`Content`}</strong>{` and `}<strong parentName=\"p\">{`User`}</strong></p>\n    <h3 {...{\n      \"id\": \"content\"\n    }}>{`Content`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`Have unique id in their types`}</li>\n      <li parentName=\"ul\">{`Has its privacy value`}</li>\n      <li parentName=\"ul\">{`Have detail page`}</li>\n      <li parentName=\"ul\">{`Can like, comment, share`}</li>\n    </ul>\n    <p>{`blogs, video, photos are `}<strong parentName=\"p\">{`Content`}</strong></p>\n    <h3 {...{\n      \"id\": \"user\"\n    }}>{`User`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`Have profile page`}</li>\n      <li parentName=\"ul\">{`Can have others contents (blogs, videos, ...)`}</li>\n      <li parentName=\"ul\">{`Have their activity stream`}</li>\n      <li parentName=\"ul\">{`User can logged in as`}</li>\n    </ul>\n    <p>{`users, pages, groups as `}<strong parentName=\"p\">{`User`}</strong></p>\n    <p>{`now we can call page, group as page user, group user as abstraction.`}</p>\n    <h2 {...{\n      \"id\": \"membership\"\n    }}>{`Membership`}</h2>\n    <p>{`When a user is logged in`}</p>\n    <ul>\n      <li parentName=\"ul\">{`he can send friend request to become friends of others.`}</li>\n      <li parentName=\"ul\">{`he can assign his friends to a his friend lists.`}</li>\n      <li parentName=\"ul\">{`he can send member request to become group member.`}</li>\n      <li parentName=\"ul\">{`he can like a page to become members of page.`}</li>\n    </ul>\n    <p>{`When logged in as group user`}</p>\n    <ul>\n      <li parentName=\"ul\">{`he can assign a members to be group admin, etc`}</li>\n    </ul>\n    <p>{`We call these relationship are membership.`}</p>\n    <p><strong parentName=\"p\">{`membership`}</strong>{` is relationship of two `}<strong parentName=\"p\">{`User`}</strong></p>\n    <p>{`User are owner of these membership`}</p>\n    <ul>\n      <li parentName=\"ul\">{`his friends`}</li>\n      <li parentName=\"ul\">{`his friend lists`}</li>\n    </ul>\n    <p>{`Group User's memberships`}</p>\n    <ul>\n      <li parentName=\"ul\">{`group members`}</li>\n      <li parentName=\"ul\">{`group admins`}</li>\n    </ul>\n    <p>{`Page User's memberships`}</p>\n    <ul>\n      <li parentName=\"ul\">{`page members`}</li>\n      <li parentName=\"ul\">{`page admins`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"privacy\"\n    }}>{`Privacy`}</h2>\n    <p>{`When users post a blog, video ... on their profile page,\nThey can set who can see their posts?`}</p>\n    <p>{`They use their own memberships`}</p>\n    <p>{`etc:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`friends`}</li>\n      <li parentName=\"ul\">{`a specific friend list`}</li>\n    </ul>\n    <p>{`In order keep clean of design, privacy should be centralized to a place, so it's have a global unique id.\nThen we can map `}<inlineCode parentName=\"p\">{`membership`}</inlineCode>{` to `}<inlineCode parentName=\"p\">{`privacy`}</inlineCode>{` concept as simple as possible.`}</p>\n    <h2 {...{\n      \"id\": \"action-entity\"\n    }}>{`Action Entity`}</h2>\n    <p>{`When users do something, example: like, share, friend request v.v... Those Models are called ActionEntity.`}</p>\n    <p>{`It is similar to Content, but ActionEntity is defined who did the action on a Content (can be Content or User - since User was a child of Content).`}</p>\n    <h2 {...{\n      \"id\": \"role--permissions\"\n    }}>{`Role & Permissions`}</h2>\n    <p>{`Think role as phpfox v4 `}<strong parentName=\"p\">{`user_group`}</strong></p>\n    <p>{`Think permissions as phpfox v4 `}<strong parentName=\"p\">{`user_group_params`}</strong>{`. Has two type:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Permission with boolean value`}</li>\n      <li parentName=\"ul\">{`Permission with actual value`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"policy\"\n    }}>{`Policy`}</h2>\n    <p>{`When user post a comment, write a blogs, share a content ... developers have to check permissions he can\ndo that actions by role & permission.`}</p>\n    <p>{`When he post on others profile pages, we also have to check owner's membership and privacy.`}</p>\n    <p>{`To reduce duplicated and keep code clean, we centralize all check permission, privacy to `}<strong parentName=\"p\">{`Policy`}</strong>{` class.`}</p>\n    <p>{`In Policy, every action we have 5 privacy layers:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Role/Permission`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`$user->hasPermissionTo('resource.view'); // return bool.\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`Privacy Owner`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`use FoxSocial\\\\Platform\\\\Support\\\\Facades\\\\PrivacyPolicy;\n\nPrivacyPolicy::checkPermissionOwner($user, $owner); // return bool.\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`User Privacy Setting of Owner`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`use Modules\\\\User\\\\Support\\\\Facades\\\\UserPrivacy;\n\nUserPrivacy::hasAccess($user->entityId(), $owner->entityId(), 'blog.view_browse_blogs'); // return bool.\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`Resource Setting: consider to use it on which level depends on context.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`use FoxSocial\\\\Platform\\\\Facades\\\\Settings;\n\nSettings::get('blog.privacy_enabled'); // return mixed (your module is free to define var type).\n\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`Privacy Resource`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`use FoxSocial\\\\Platform\\\\Support\\\\Facades\\\\PrivacyPolicy;\n\nPrivacyPolicy::checkPermission($user, $resource); // return bool.\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"event\"\n    }}>{`Event`}</h2>\n    <p>{`Laravel's event is a implementation of `}<a parentName=\"p\" {...{\n        \"href\": \"https://en.wikipedia.org/wiki/Observer_pattern\"\n      }}>{`Observer Pattern`}</a></p>\n    <p>{`In thinking, event is a replacement of phpFox plugins.`}</p>\n    <p>{`event is simple way to decouple package dependencies and extends platform features.`}</p>\n    <h3 {...{\n      \"id\": \"using-event-to-notify-an-action\"\n    }}>{`using event to notify an action`}</h3>\n    <p>{`When a new user registered, we should notify an action `}<inlineCode parentName=\"p\">{`user_created`}</inlineCode>{` with `}<inlineCode parentName=\"p\">{`$user`}</inlineCode>{` data.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`events()->dispatch('user_created', $user);\n`}</code></pre>\n    <p>{`all listeners registered to action `}<inlineCode parentName=\"p\">{`user_registered`}</inlineCode>{` will handle the action as`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`class UserCreatedListener\n{\n  public function handle($user){\n      // put your code here\n  }\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"using-event-to-interact\"\n    }}>{`using event to interact`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`$response = event()->dispatch('get_module_settings');\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`class ModuleSettingListener\n{\n  function handle()\n  {\n    return ['add_new_setting'=>['database_down']];\n  }\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"using-event-to-call-others-module-api\"\n    }}>{`using event to call others module api`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`event()->dispatch('create_new_feed', $action);\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`class CreateFeedActionHandler\n{\n  public function handle($action)\n  {\n      $feedService->createAction($action);\n  }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"model-observer\"\n    }}>{`Model Observer`}</h2>\n    <p>{`Model observer is integration of Eloquent model and event system with events\ncreating, created, updating, updated, deleting, deleted.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`class PostObserver\n{\n\n  public function creating($post)\n  {\n    // this method is invoked automatically when Blog is created\n  }\n\n\n  public function created($post)\n  {\n    // this method is invoked automatically when Blog is created\n  }\n\n  // others\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"feed--stream\"\n    }}>{`Feed & Stream`}</h2>\n    <p>{`When user post blogs, video, photo, ... platform centralized actions into feed, then following users can see and interact with.`}</p>\n    <p>{`platform keep in as simple as possible, it contains:`}</p>\n    <p>{`feed(item_type, item_id, user_id, user_type, owner_id, owner_type, type_id)`}</p>\n    <p>{`item_type, item_id: to specify item talking about`}</p>\n    <p>{`user_type, user_id: to specific user who is created item`}</p>\n    <p>{`owner_type, owner_id: to specific where it's posted to (other users, on a page, on a group v.v...)`}</p>\n    <p>{`type_id: to categorize feed, feed abilities: `}<strong parentName=\"p\">{`can_comment`}</strong>{`, `}<strong parentName=\"p\">{`can_like`}</strong>{`, `}<strong parentName=\"p\">{`can_share`}</strong>{`, `}<strong parentName=\"p\">{`can_edit`}</strong>{`, `}<strong parentName=\"p\">{`can_create_feed`}</strong>{`, `}<strong parentName=\"p\">{`can_put_stream`}</strong>{`.`}</p>\n    <p>{`When a feed is created, how to deliver it ?`}</p>\n    <p>{`The trouble comes when feed owner set privacy to many friend lists. We can not keep many privacy in single feed record, So we put feed + privacy to other feed_stream tables.`}</p>\n    <p>{`It contains feed_id, privacy_id, owner_id so we can deliver feed in flexible way.`}</p>\n    <p>{`privacy_id: to specify who can see`}</p>\n    <p>{`owner_id: to specify profile page`}</p>\n    <h2 {...{\n      \"id\": \"storage--disk\"\n    }}>{`Storage & Disk`}</h2>\n    <p>{`We have core_storage_services : currently we support s3 and local. Per service we can have multiple config instances (core_storage).`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Config in config/filesystems.php`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"scope\"\n    }}>{`Scope`}</h2>\n    <p>{`When you want to add custom query to Query Builder, use Scope. phpFox support:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://laravel.com/docs/8.x/eloquent#global-scopes\"\n        }}>{`Global scopes`}</a>{`: avoid to use this because it will add to model static and apply for the whole request process.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://laravel.com/docs/8.x/eloquent#local-scopes\"\n        }}>{`Local scopes`}</a>{`: write inside Model, but try not to write too much in Model, only write Scope that will always be used.`}</li>\n      <li parentName=\"ul\">{`Apply Scope: This is metaFox own feature. When we build query, we can create a Scope and apply it into current Query.`}</li>\n    </ul>\n    <p>{`Example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`\n$exampleScope = new ExampleScope();\n$exampleScope->setSomeAttribute('123');\n\n$model = new Model();\n$query = $model->newQuery()->applyScope($exampleScope);\n$data = $query->get();\n\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}