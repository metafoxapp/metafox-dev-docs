{"version":3,"sources":["webpack:///../src/public/frontend/service.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"wPAQaA,G,UAAe,S,iNAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,kBACE,GAAM,mBADR,mBAGA,qHACA,sFAAqE,0BAAYC,WAAW,KAAvB,iBAArE,+BAA8J,0BAAYA,WAAW,KAAvB,WAA9J,oDACA,yHACA,4CACA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBADZ,sMAYL,2CACA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,eADZ,8IAQL,8BACE,iBAAGA,WAAW,cAAd,iHAEF,kBACE,GAAM,kBADR,kBAGA,2DAA0C,0BAAYA,WAAW,KAAvB,aAA1C,uDACA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBADZ,8dA8BL,0EAAyD,0BAAYA,WAAW,KAAvB,aAAzD,mBACA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBADZ,yKASL,kBACE,GAAM,iBADR,iBAGA,0EAAyD,0BAAYA,WAAW,KAAvB,cAAzD,iFAAiM,0BAAYA,WAAW,KAAvB,kBACjM,uBAAK,oBAAMA,WAAW,MAClB,UAAa,iBADZ,wDAQL,gGACA,qFAAoE,0BAAYA,WAAW,KAAvB,mBAApE,eACA,kBACE,GAAM,sBADR,sBAGA,qPAEA,8EACA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBADZ,mJASL,oDACA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBADZ,gJAYL,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBADZ,yOAUL,kBACE,GAAM,2BADR,2BAGA,8LAEA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBADZ,oGASL,wCACA,iDACA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBADZ,gJASL,+DACA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBADZ,qJAUL,kBACE,GAAM,iBADR,iBAGA,sBACE,kBAAIA,WAAW,MAAf,aACA,kBAAIA,WAAW,MAAf,cACA,kBAAIA,WAAW,MAAf,iBACA,kBAAIA,WAAW,MAAf,iBACA,kBAAIA,WAAW,MAAf,qBACA,kBAAIA,WAAW,MAAf,iBACA,kBAAIA,WAAW,MAAf,QACA,kBAAIA,WAAW,MAAf,oBACA,kBAAIA,WAAW,MAAf,cACA,kBAAIA,WAAW,MAAf,cACA,kBAAIA,WAAW,MAAf,WACA,kBAAIA,WAAW,MAAf,mBACA,kBAAIA,WAAW,MAAf,oBACA,kBAAIA,WAAW,MAAf,cACA,kBAAIA,WAAW,MAAf,cACA,kBAAIA,WAAW,MAAf,eACA,kBAAIA,WAAW,MAAf,eACA,kBAAIA,WAAW,MAAf,wB,+MAMNJ,EAAWK,gBAAiB","file":"component---src-public-frontend-service-mdx-1e542cc5cdff2003c79d.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/namnv/Sites/foxsocial/metafox-dev-docs/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"service-manager\"\n    }}>{`Service Manager`}</h1>\n    <p>{`Service is class instance, function or React Component to handle a pieces of your app logic.`}</p>\n    <p>{`In phpFox, platform keeps service in a service manager called `}<inlineCode parentName=\"p\">{`globalContext`}</inlineCode>{`, You can not access global `}<inlineCode parentName=\"p\">{`manager`}</inlineCode>{` directly but via hooks or saga context instead.`}</p>\n    <p>{`Any service passed to global service manager can be access in React component or sagas function.`}</p>\n    <p>{`In React component:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import {useGlobal} from '@metafox/core'\n\nconst MyComponent (){\n  const manager = useGlobal();\n  const {apiClient} =  manager\n\n  // or simplier\n  // const {apiClient} =  useGlobal();\n}\n`}</code></pre>\n    <p>{`In saga component:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { getContext } from 'redux-saga/effects';\n\nexport function mySagas() {\n  const { apiClient } = yield * getGlobalContext();\n}\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`globalContext is mutable, changed a its members will affected others later access without changed or update.`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"class-services\"\n    }}>{`Class Services`}</h2>\n    <p>{`A standard service class must have `}<inlineCode parentName=\"p\">{`bootstrap`}</inlineCode>{` method, DO NOT define bootstrap as arrow function.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`/**\n * @type: service\n * name: logService\n **/\n\n# file src/manager/LogService.ts\n\nimport {Manager} from '@metafox/manager'\n\ntype LogServiceProps {\n  // any property here\n}\n\nclass LogService {\n  options: LogServiceProps;\n  constructor(config: LogServiceProps){\n    this.config = LogServiceProps\n  }\n\n  bootstrap(manager: Manager){\n    // to do something here.\n    // return this or void\n  }\n  info(message: string){\n    console.log(message)\n  }\n}\n`}</code></pre>\n    <p>{`Restart dev server, now you can retry service use `}<inlineCode parentName=\"p\">{`useGlobal`}</inlineCode>{` hook, example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import useGlobal from '@metafox/core';\n\nconst LoginForm (){\n  const { logService } = useGlobal();\n  logService.info('This message is passed by logService')\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"configuration\"\n    }}>{`Configuration`}</h2>\n    <p>{`A above example, You have created a service named `}<inlineCode parentName=\"p\">{`logService`}</inlineCode>{`, You can pass configuration from root app by a section with the same name in `}<inlineCode parentName=\"p\">{`manifest.json`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"logService\": {\n    \"level\": \"warn\"\n  }\n}\n`}</code></pre>\n    <p>{`Service manager will pass this configuration to LogService constructor.`}</p>\n    <p>{`If you want ot access global configuration in LogService use `}<inlineCode parentName=\"p\">{`manager.options`}</inlineCode>{` accesstor.`}</p>\n    <h2 {...{\n      \"id\": \"functional-service\"\n    }}>{`Functional Service`}</h2>\n    <p>{`Some time you would like to declare general functions which can be used anywhere in components and sagas, You also hate to declare import dependencies everywhere. You\nThe better way is inject theme into manager manager.`}</p>\n    <p>{`This example define a function generate random string`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`export default function randomId(): string {\n  return Math.random()\n    .toString(36)\n    .replace(/[^a-z]+/g, '')\n    .substr(0, 5);\n}\n`}</code></pre>\n    <p>{`Now, you pass it to manager`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`# file src/manager.tsx\n\nconst manager = {\n  logService: LogService,\n  randomId,\n  // other manager here\n}\n\nexport default manager\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import {useGlobal} from '@metafox/core';\n\nconst LoginForm (){\n  const { logService, randomId } = useGlobal();\n  logService.info('This message is passed by logService')\n  logService.info('test message id:', randomId());\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"react-component-service\"\n    }}>{`React Component Service`}</h2>\n    <p>{`In order to inject a React Component Cross module without dependencies declaration, the best way\nis inject component into global service manager using inject method`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`/**\n * @type: service\n * name: CommentList\n */\n\nexport default function CommentList() {}\n`}</code></pre>\n    <p>{`declare typings`}</p>\n    <p>{`create ./src/module.d.ts`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import '@metafox/core/Manager';\ndeclare module '@metafox/core/Manager' {\n  interface Manager {\n    CommentList?: React.FC<{}>;\n  }\n}\n`}</code></pre>\n    <p>{`Getting CommentList from any component`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import { useGlobal } from '@metafox/core';\n\nfunction MyComponent() {\n  const { CommentList } = useGlobal();\n\n  return <CommentList />;\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"core-services\"\n    }}>{`Core Services`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`apiClient`}</li>\n      <li parentName=\"ul\">{`usePopover`}</li>\n      <li parentName=\"ul\">{`cookieBackend`}</li>\n      <li parentName=\"ul\">{`normalization`}</li>\n      <li parentName=\"ul\">{`preferenceBackend`}</li>\n      <li parentName=\"ul\">{`dialogBackend`}</li>\n      <li parentName=\"ul\">{`intl`}</li>\n      <li parentName=\"ul\">{`createPageParams`}</li>\n      <li parentName=\"ul\">{`localStore`}</li>\n      <li parentName=\"ul\">{`compactUrl`}</li>\n      <li parentName=\"ul\">{`slugify`}</li>\n      <li parentName=\"ul\">{`copyToClipboard`}</li>\n      <li parentName=\"ul\">{`useActionControl`}</li>\n      <li parentName=\"ul\">{`useSession`}</li>\n      <li parentName=\"ul\">{`useGetItem`}</li>\n      <li parentName=\"ul\">{`useLoggedIn`}</li>\n      <li parentName=\"ul\">{`useIsMobile`}</li>\n      <li parentName=\"ul\">{`usePageParams`}</li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}