{"version":3,"sources":["webpack:///../src/public/backend/example-app.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---src-public-backend-example-app-mdx-53c9d08694a155d5b5d1.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/namnv/Sites/foxsocial/metafox-dev-docs/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <blockquote>\n      <p parentName=\"blockquote\">{`In this part, you will learn how to create new Blog package,\npackage vendor is `}<inlineCode parentName=\"p\">{`company`}</inlineCode>{` then full package name should be `}<inlineCode parentName=\"p\">{`company/packages`}</inlineCode></p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"generate-files-skeleton\"\n    }}>{`Generate Files Skeleton`}</h2>\n    <p>{`The simple way to init a module is using admincp.\nvisit admincp at \"/app\" then follow wizard to create your first module`}</p>\n    <p>{`Let start by init schema structure`}</p>\n    <h2 {...{\n      \"id\": \"generate-database-schema\"\n    }}>{`Generate Database Schema`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`# create migration file\nphp artisan package:make-migration company/blog create_blog_schema\n`}</code></pre>\n    <p>{`enter directory company/blog/src/Database/Migrations, open php file`}</p>\n    <p>{`You'll see a class with two method `}<inlineCode parentName=\"p\">{`up`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`down`}</inlineCode>{`.`}</p>\n    <p>{`Put create schema to `}<inlineCode parentName=\"p\">{`up()`}</inlineCode>{` and destroy schema to `}<inlineCode parentName=\"p\">{`down()`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`class CreateBlogTables extends Migration\n{\n    public function up()\n    {\n        if (!Schema::hasTable('blogs')) {\n            Schema::create('blogs', function (Blueprint $table) {\n                // Create table structure.\n            });\n        }\n    }\n\n    public function down()\n    {\n        Schema::dropIfExists('blogs');\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"code-generator\"\n    }}>{`Code Generator`}</h2>\n    <p>{`Setup which files should be generated in company/blog/config/config.php`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`\nreturn [\n    'version'=> 'v1',\n    'models'  => [\n        // Model class name.\n        'Blog'          => [\n            'resource'    => [\n                'repository' => true, // Generate repository ?\n                'policy'     => true, // Generate policy ?\n                'response'   => true, // Generate json resource ?\n                'controller' => false, // Generate controller ?\n                'observer'   => false, // Generate observer ?\n                'request'    => false, // Generate request ?\n            ],\n            'table'       => 'blogs', // Table name in database\n            'entity_type' => 'blog', // Entity name\n            'graphql'     => false, // Generate GraphQL ?\n        ],\n    ]\n];\n`}</code></pre>\n    <p>{`Then run the command:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`php artisan normalize metafox/blog\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"model\"\n    }}>{`Model`}</h2>\n    <h3 {...{\n      \"id\": \"type\"\n    }}>{`Type:`}</h3>\n    <p>{`If Model is Content, implement:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`interface: `}<strong parentName=\"li\">{`FoxSocial\\\\Platform\\\\Contracts\\\\Content`}</strong></li>\n      <li parentName=\"ul\">{`trait: `}<strong parentName=\"li\">{`FoxSocial\\\\Platform\\\\Support\\\\HasContent`}</strong>{`.`}</li>\n    </ul>\n    <p>{`If Model is User, implement:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`interface: `}<strong parentName=\"li\">{`FoxSocial\\\\Platform\\\\Contracts\\\\User`}</strong></li>\n      <li parentName=\"ul\">{`trait: `}<strong parentName=\"li\">{`FoxSocial\\\\Platform\\\\Support\\\\HasUser`}</strong>{`.`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"define-model-userowner\"\n    }}>{`Define Model User/Owner:`}</h3>\n    <p>{`If Model has user_id, user_type => use trait `}<strong parentName=\"p\">{`FoxSocial\\\\Platform\\\\Traits\\\\Eloquent\\\\Model\\\\HasUserMorph`}</strong>{`.`}</p>\n    <p>{`If Model has owner_id, owner_type => use trait `}<strong parentName=\"p\">{`FoxSocial\\\\Platform\\\\Traits\\\\Eloquent\\\\Model\\\\HasOwnerMorph`}</strong>{`.`}</p>\n    <h3 {...{\n      \"id\": \"privacy\"\n    }}>{`Privacy`}</h3>\n    <p>{`If Model has privacy and MUST has custom privacy (if not, skip this step), implement:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`interface: `}<strong parentName=\"li\">{`FoxSocial\\\\Platform\\\\Support\\\\Eloquent\\\\Appends\\\\Contracts\\\\AppendPrivacyList`}</strong></li>\n      <li parentName=\"ul\">{`trait: `}<strong parentName=\"li\">{`FoxSocial\\\\Platform\\\\Support\\\\Eloquent\\\\Appends\\\\AppendPrivacyListTrait`}</strong>{`.`}</li>\n    </ul>\n    <p>{`This will give model two method `}<strong parentName=\"p\">{`setPrivacyListAttribute`}</strong>{` and `}<strong parentName=\"p\">{`getPrivacyListAttribute`}</strong>{` to set/get privacy list. Example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`$blog = new Blog();\n$blog->setPrivacyListAttribute([1, 2, 3]);\nvar_dump($blog->getPrivacyListAttribute()); // print 1, 2, 3. If privacy != 4, it will return null.\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"create-feed\"\n    }}>{`Create Feed:`}</h3>\n    <p>{`If Model is Content, and Model can create Feed => implement interface `}<strong parentName=\"p\">{`FoxSocial\\\\Platform\\\\Contracts\\\\ActivityFeedSource`}</strong>{`.`}</p>\n    <p>{`=> Method `}<em parentName=\"p\">{`toActivityFeed`}</em>{` will return a `}<em parentName=\"p\">{`FeedAction`}</em>{` instance, this is feed data before creating a feed. Making sure type_id is correct (see Settings)`}</p>\n    <h3 {...{\n      \"id\": \"stream\"\n    }}>{`Stream`}</h3>\n    <p>{`If Model can create Resource Stream (using for browse), implement interface `}<strong parentName=\"p\">{`FoxSocial\\\\Platform\\\\Contracts\\\\HasResourceStream`}</strong></p>\n    <p>{`First, we will define Blog Stream Model:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`namespace Modules\\\\Blog\\\\Models;\n\nuse Illuminate\\\\Database\\\\Eloquent\\\\Model;\n\nclass PrivacyStream extends Model\n{\n    protected $table = 'blog_privacy_streams';\n\n    public $timestamps = false;\n\n    protected $fillable = [\n        'privacy_id',\n        'item_id',\n    ];\n}\n`}</code></pre>\n    <p>{`Then in Blog Model, we define this relation:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`public function privacy_streams(): HasMany\n{\n    return $this->hasMany(PrivacyStream::class, 'item_id', 'id');\n}\n`}</code></pre>\n    <p>{`Finally we will have a Blog Model looks like this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`\nuse FoxSocial\\\\Platform\\\\Contracts\\\\Content;\nuse FoxSocial\\\\Platform\\\\Traits\\\\Eloquent\\\\Model\\\\HasUserMorph;\nuse FoxSocial\\\\Platform\\\\Traits\\\\Eloquent\\\\Model\\\\HasOwnerMorph;\nuse FoxSocial\\\\Platform\\\\Contracts\\\\ActivityFeedSource;\nuse FoxSocial\\\\Platform\\\\Contracts\\\\HasResourceStream;\n\nclass Blog extends Model implements Content, ActivityFeedSource, AppendPrivacyList, HasResourceStream;\n{\n    use HasContent;\n    use HasUserMorph;\n    use HasOwnerMorph;\n    use AppendPrivacyListTrait;\n\n    public const ENTITY_TYPE = 'blog'; // Always define ENTITY_TYPE.\n\n    public function toActivityFeed(): FeedAction\n    {\n        return new FeedAction([\n            'user_id'    => $this->userId(),\n            'user_type'  => $this->userType(),\n            'owner_id'   => $this->ownerId(),\n            'owner_type' => $this->ownerType(),\n            'item_id'    => $this->entityId(),\n            'item_type'  => $this->entityType(),\n            'type_id'    => 'blog_created',\n            'privacy'    => $this->privacy,\n        ]);\n    }\n\n    public function privacy_streams(): HasMany\n    {\n        return $this->hasMany(PrivacyStream::class, 'item_id', 'id');\n    }\n}\n\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"use-entity-name\"\n    }}>{`Use Entity Name`}</h3>\n    <p>{`Default Laravel will use class name: Modules\\\\Blog\\\\Models\\\\Blog. To use \"blog\" only, go to company/blog/src/Providers/ModuleServiceProvider and define in boot method.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`public function boot()\n{\n     Relation::morphMap([\n        Blog::ENTITY_TYPE => Blog::class,\n    ]);\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"model-observer\"\n    }}>{`Model observer`}</h2>\n    <p>{`Go to company/blog/src/Providers/ModuleServiceProvider, define in boot method.`}</p>\n    <p>{`Note if model is User or Content Type, you must register with global observer. Depend on abilities of Interface, Model will listen differently with platform process.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`class BlogServiceProvider extends ServiceProvider\n{\n    public function boot()\n    {\n         Blog::observe([\n            \\\\FoxSocial\\\\Platform\\\\Support\\\\EloquentModelObserver::class, // Global observer.\n            \\\\Modules\\\\Blog\\\\Observers\\\\BlogObserver::class, // Your own blog observer.\n         ]);\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"module-settings\"\n    }}>{`Module Settings`}</h2>\n    <p>{`All app settings will be defined in company/blog/src/Listeners/ModuleSettingListener.php.`}</p>\n    <h3 {...{\n      \"id\": \"define-module-name\"\n    }}>{`Define Module Name`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`class ModuleSettingListener extends BaseModuleSettingListener implements ModuleSettingInterface\n{\n    public function getModuleName(): string\n    {\n        return 'company-blog'; // Name your module in here.\n    }\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"setting-to-create-feed\"\n    }}>{`Setting to create Feed`}</h3>\n    <p>{`To make a Content Model can able to create Feed, define activity type below:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`class ModuleSettingListener extends BaseModuleSettingListener implements ModuleSettingInterface\n{\n    // ....\n\n    public function getActivityTypes(): array\n    {\n        return [\n            [\n                'type'            => 'blog_created', // This is the name of action.\n                'module_id'       => $this->getModuleName(),\n                'is_active'       => true,\n                'title'           => 'Blog Activity Type',\n                'description'     => 'Blog Activity Type Setting',\n                'is_system'       => 0,\n                'can_comment'     => true, // Ability to do actions on feed.\n                'can_like'        => true,\n                'can_share'       => true,\n                'can_edit'        => true,\n                'can_create_feed' => true,\n                'can_put_stream'  => true,\n            ],\n        ];\n    }\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"add-resource-to-activity-form\"\n    }}>{`Add Resource to Activity Form`}</h3>\n    <p>{`In fox4 there is only Photo, Activity Post, Video. In fox5, we have this quick setting to add a resource to Activity Feed Form.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`class ModuleSettingListener extends BaseModuleSettingListener implements ModuleSettingInterface\n{\n    // ....\n\n    public function getActivityForm(): array\n    {\n        return [\n            Post::ENTITY_TYPE => [\n                // setting more here.\n            ],\n        ];\n    }\n}\n\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"setting-policy\"\n    }}>{`Setting Policy.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`class ModuleSettingListener extends BaseModuleSettingListener implements ModuleSettingInterface\n{\n    // ....\n\n    public function getPolicies(): array\n    {\n        return [\n            Blog::class     => BlogPolicy::class,\n            Category::class => CategoryPolicy::class,\n        ];\n    }\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"setting-user-permissions\"\n    }}>{`Setting User Permissions.`}</h3>\n    <p>{`In fox5, we assign permissions to role in \"tree\". Example if you define UserRole::LEVEL_REGISTERED, then all roles from user register to all higher roles will have that permissions.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`class ModuleSettingListener extends BaseModuleSettingListener implements ModuleSettingInterface\n{\n    // ....\n    public function getUserPermissions(): array\n    {\n        return [\n            Blog::ENTITY_TYPE     => [\n                'view'     => UserRole::LEVEL_REGISTERED,\n                'create'   => UserRole::LEVEL_REGISTERED,\n                'update'   => UserRole::LEVEL_REGISTERED,\n                'delete'   => UserRole::LEVEL_REGISTERED,\n                'moderate' => UserRole::LEVEL_STAFF,\n                'feature'  => UserRole::LEVEL_REGISTERED,\n                'approve'  => UserRole::LEVEL_REGISTERED,\n                'sponsor'  => UserRole::LEVEL_REGISTERED,\n            ],\n        ];\n    }\n}\n`}</code></pre>\n    <p>{`If you only want to assign role to specific role:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`\nreturn [\n    Blog::ENTITY_TYPE     => [\n        'specific-permission' => [UserRole::STAFF_USER]\n    ],\n];\n\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"site-setting\"\n    }}>{`Site Setting`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`\nclass ModuleSettingListener extends BaseModuleSettingListener implements ModuleSettingInterface\n{\n    // ....\n\n    public function getSiteSettings(): array\n    {\n        return [\n            'blog_paging_mode' => false,\n        ];\n    }\n}\n\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"setting-user-privacy\"\n    }}>{`Setting User Privacy`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`getUserPrivacy: define all profile settings.`}</li>\n      <li parentName=\"ul\">{`getUserPrivacyResource: define all settings (defined in getUserPrivacy methods) are used by resources. Example: you create setting Blog-A, then you want to apply it to page, group v.v... then you just define those in this method. You can set it own phrase too.`}</li>\n      <li parentName=\"ul\">{`getDefaultPrivacy: set default privacy of a resource.`}</li>\n      <li parentName=\"ul\">{`getProfileMenu: set sections can be viewed on user profile.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`\nclass ModuleSettingListener extends BaseModuleSettingListener implements ModuleSettingInterface\n{\n    // ....\n\n    public function getUserPrivacy(): array\n    {\n        return [\n            'blog.share_blogs'       => [\n                'phrase'  => 'blog.phrase.user_privacy.who_can_share_blogs',\n                'default' => PhpfoxPrivacy::EVERYONE,\n            ],\n            'blog.view_browse_blogs' => [\n                'phrase'  => 'blog.phrase.user_privacy.who_can_view_blogs',\n                'default' => PhpfoxPrivacy::EVERYONE,\n            ],\n        ];\n    }\n\n    public function getUserPrivacyResource(): array\n    {\n        return [\n            'page'  => [\n                'blog.share_blogs',\n                'blog.view_browse_blogs',\n                'custom_seting' => 'custom_setting_phrase',\n            ],\n            'group' => [\n                'blog.share_blogs',\n            ],\n        ];\n    }\n\n    public function getDefaultPrivacy()\n    {\n        return [\n            Blog::ENTITY_TYPE => [\n                'phrase'  => 'blog.phrase.blogs',\n                'default' => PhpfoxPrivacy::EVERYONE,\n            ],\n            // set for more resources.\n            // ...\n        ];\n    }\n\n    public function getProfileMenu(): array\n    {\n        return [\n            Blog::ENTITY_TYPE => [\n                'phrase'  => 'blog.phrase.blogs',\n                'default' => PhpfoxPrivacy::EVERYONE,\n            ],\n            // set for more resources.\n            // ...\n        ];\n    }\n}\n\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"resource-names\"\n    }}>{`Resource Names`}</h3>\n    <p>{`We can have multiple resources:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`\nclass ModuleSettingListener extends BaseModuleSettingListener implements ModuleSettingInterface\n{\n    // ....\n\n    public function getItemTypes(): array\n    {\n        return [\n            Feed::ENTITY_TYPE,\n            Post::ENTITY_TYPE,\n            Share::ENTITY_TYPE,\n        ];\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"repository\"\n    }}>{`Repository`}</h2>\n    <p>{`Repository can be extended from FoxSocial\\\\Platform\\\\Repositories\\\\AbstractRepository, in some case it may not. But a repository always need a repository interface.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Location for repository interfaces: company/blog/src/Repositories;`}</li>\n      <li parentName=\"ul\">{`Location for repository class: company/blog/src/Repositories/Eloquent;`}</li>\n    </ul>\n    <p>{`Example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`namespace Modules\\\\Blog\\\\Repositories\\\\Eloquent;\n\nuse FoxSocial\\\\Platform\\\\Repositories\\\\AbstractRepository;\nuse Modules\\\\Blog\\\\Repositories\\\\BlogRepositoryInterface;\n\nclass BlogRepository extends AbstractRepository implements BlogRepositoryInterface\n{\n    public function model(): string\n    {\n        return Blog::class;\n    }\n}\n`}</code></pre>\n    <p>{`Go to company/blog/src/Providers/BlogServiceProvider and register (For detail please read about Repository Pattern).`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`use Modules\\\\Blog\\\\Repositories\\\\BlogRepositoryInterface;\nuse Modules\\\\Blog\\\\Repositories\\\\Eloquent\\\\BlogRepository;\n\nclass BlogServiceProvider extends ServiceProvider\n{\n    public function register()\n    {\n         $this->app->bind(BlogRepositoryInterface::class, BlogRepository::class);\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"translation\"\n    }}>{`Translation`}</h2>\n    <p>{`Each folder is a language pack.`}</p>\n    <p>{`company/blog/resources/lang - en\nphrase.php - vi\nphrase.php`}</p>\n    <p>{`Note: we did not support json file yet (will implement soon).`}</p>\n    <p>{`Example: company/blog/resources/lang/en/phrase.php`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`return [\n    'example_text' => 'Example text',\n    'group' => [\n        'example_text' => 'Group example text',\n    ]\n];\n\n`}</code></pre>\n    <p>{`After change language, run:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`php artisan phpfox:update\n`}</code></pre>\n    <p>{`Usage: to use call module_name + file name + key (+ n key level)`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`echo __p('blog.phrase.example_text'); // it will print 'Example text'.\necho __p('blog.phrase.group.example_text'); // it will print 'Group Example text'.\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"resource\"\n    }}>{`Resource`}</h2>\n    <p>{`Like Fox4 Resource, go to company/src/Http/Resources/v1/Blog. You will see:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`BlogDetail: is resource when view detail.`}</li>\n      <li parentName=\"ul\">{`BlogEmbed: is embed object when view feed.`}</li>\n      <li parentName=\"ul\">{`BlogEmbedCollection: BlogEmbed list.`}</li>\n      <li parentName=\"ul\">{`BlogItem: is resource when view listing.`}</li>\n      <li parentName=\"ul\">{`BlogItemCollection: BlogItem list.`}</li>\n    </ul>\n    <p>{`Example for BlogDetail:`}</p>\n    <p>{`We give you 3 trait helper:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`HasStatistic: give you method getStatistic()`}</li>\n      <li parentName=\"ul\">{`HasExtra: give you method getExtra()`}</li>\n      <li parentName=\"ul\">{`HasFeedParam: give you method getFeedParams()`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`\nuse FoxSocial\\\\Platform\\\\Traits\\\\Http\\\\Resources\\\\HasExtra;\nuse FoxSocial\\\\Platform\\\\Traits\\\\Http\\\\Resources\\\\HasFeedParam;\nuse FoxSocial\\\\Platform\\\\Traits\\\\Http\\\\Resources\\\\HasStatistic;\nuse Illuminate\\\\Http\\\\Resources\\\\Json\\\\JsonResource;\n\nclass BlogDetail extends JsonResource\n{\n    use HasExtra;\n    use HasStatistic;\n    use HasFeedParam;\n\n    public function toArray($request)\n    {\n        'id'                => $this->resource->id,\n        'module_name'       => $this->resource->entityType(),\n        'resource_name'     => $this->resource->entityType(),\n\n        // Other attributes.\n        'statistic'         => $this->getStatistic(),\n        'extra'             => $this->getExtra(),\n        'feed_param'        => $this->getFeedParams(),\n\n        // Custom attributes.\n        'custom-attribute'  => 'abc'\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"form-request\"\n    }}>{`Form Request`}</h2>\n    <p>{`Like Fox4 Form, go to company/src/Http/Requests/v1/Blog. You will see some default request like IndexRequest, StoreRequest, UpdateRequest.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`\nclass StoreRequest extends FormRequest\n{\n    // Form rules.\n    public function rules()\n    {\n        return [\n            'post_type'         => ['required'],\n            'privacy'           => ['sometimes', new PrivacyRule()],\n            'post_as_parent'    => ['sometimes', 'exists:user_entities,id'],\n            'tagged_friends'    => ['sometimes', 'array'],\n            'location'          => [\n                'sometimes', 'array',\n            ],\n            'location.address'  => 'string',\n            'location.lat'      => 'numeric',\n            'location.lng'      => 'numeric',\n        ];\n    }\n\n    // If you want to custom attributes after validated success, use this method.\n    public function validated()\n    {\n        $data = parent::validated();\n\n        if (empty($data['post_as_parent'])) {\n            $data['post_as_parent'] = Auth::id();\n        }\n\n        if (!isset($data['privacy'])) {\n            $data['privacy'] = PhpfoxPrivacy::EVERYONE;\n        }\n\n        return $data;\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"api\"\n    }}>{`Api`}</h2>\n    <p>{`Go to company/blog/src/Http/Controllers/Api, you will see some Controller. It's Gateway Controller for multiple API versions.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`\nnamespace Modules\\\\Blog\\\\Http\\\\Controllers\\\\Api;\n\nuse FoxSocial\\\\Platform\\\\Http\\\\Controllers\\\\Api\\\\GatewayController;\n\n/**\n * --------------------------------------------------------------------------\n *  Api Gateway\n * --------------------------------------------------------------------------\n *\n * This class solve api versioning problem.\n * DO NOT IMPLEMENT ACTION HERE.\n */\n\n/**\n * Class CategoryController\n * @package Modules\\\\Blog\\\\Http\\\\Controllers\\\\Api\n */\nclass BlogController extends GatewayController\n{\n    protected $controllers = [\n        'v1'   => v1\\\\BlogController::class,\n        // Define many Controllers as you want here.\n    ];\n\n    // DO NOT IMPLEMENT ACTION HERE.\n}\n\n`}</code></pre>\n    <p>{`In each version, example v1, you will create a folder v1 and create a BlogController.`}</p>\n    <p>{`You MUST extend from Platform's ApiController.`}</p>\n    <p>{`You need to create a repository instance, must create by interface. For detail please read Dependence Injection.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`namespace Modules\\\\Blog\\\\Http\\\\Controllers\\\\Api\\\\v1;\n\nuse FoxSocial\\\\Platform\\\\Http\\\\Controllers\\\\Api\\\\ApiController;\nuse Modules\\\\Blog\\\\Repositories\\\\BlogRepositoryInterface;\nuse Modules\\\\Blog\\\\Http\\\\Requests\\\\v1\\\\Blog\\\\IndexRequest;\nuse Modules\\\\Blog\\\\Http\\\\Resources\\\\v1\\\\Blog\\\\BlogItemCollection;\n\nclass BlogController extends ApiController\n{\n    public $repository;\n\n    public function __construct(BlogRepositoryInterface $repository)\n    {\n        $this->repository = $repository;\n    }\n\n    public function store(StoreRequest $request)\n    {\n        // Use this method to get form data.\n        $params = $request->validated();\n\n        // Use this to get context user. Note: making sure whether this action is authenticated or not. If not, do not use this.\n        $user = Auth::user();\n\n        // Post to where?\n        $owner = $params['post_as_parent'] ? UserEntity::getById($params['post_as_parent'])->detail : $user;\n\n        // Best practice: when creating a Content, should always define data => post from who => post to who.\n        $blog = $this->repository->createBlog($params, $user, $owner);\n\n        // After get data, populate it into Resource.\n        return new Detail($blog);\n    }\n}\n\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"scope\"\n    }}>{`Scope`}</h2>\n    <p>{`If you want to query Blog by custom query, how to implement? Do not write any custom query inside Blog Model.`}</p>\n    <p>{`Go to company/blog/src/Scopes and create ExampleScope`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`\nuse Illuminate\\\\Database\\\\Eloquent\\\\Scope;\nuse Illuminate\\\\Database\\\\Eloquent\\\\Builder;\nuse Illuminate\\\\Database\\\\Eloquent\\\\Model;\n\nclass ExampleScope implements BaseScope\n{\n    private $example;\n\n    public function setExample($data)\n    {\n        $this->example = $data;\n    }\n\n    public function getExample()\n    {\n        return $this->example;\n    }\n\n    public function apply(Builder $builder, Model $model)\n    {\n        $builder->where('example_column', '=', $this->getExample());\n    }\n}\n\n`}</code></pre>\n    <p>{`Usage:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`\n$yourScope = new ExampleScope();\n$yourScope->setExample('123');\n\n$blog = new Blog();\n$query = $blog->newQuery()->addScope($yourScope);\n$query->limit(1);\n$data = $query->get();\n\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"platform-scopes\"\n    }}>{`Platform Scopes`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`FoxSocial\\\\Platform\\\\Support\\\\Browse\\\\Scopes\\\\PrivacyScope`}</li>\n    </ul>\n    <p>{`This scope will help you query blog with blog stream.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`\n$privacyScope = new PrivacyScope();\n$privacyScope->setUserId(1);\n\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`FoxSocial\\\\Platform\\\\Support\\\\Browse\\\\Scopes\\\\SortScope`}</li>\n    </ul>\n    <p>{`This scope will help you sort your Blog.php`}</p>\n    <p>{`Support: recent, most_viewed, most_liked, most_discussed.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`$sortScope = new SortScope();\n$sortScope->setSort('recent') // Or use constant \\\\FoxSocial\\\\Platform\\\\Support\\\\Browse::SORT_RECENT\n    ->setSortType('desc'); // asc or desc.\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`FoxSocial\\\\Platform\\\\Support\\\\Browse\\\\Scopes\\\\WhenScope`}</li>\n    </ul>\n    <p>{`This scope will help you query your Blog by time.`}</p>\n    <p>{`Support: all, this_month, this_week, today. Default: all.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`\n$whenScope = new WhenScope();\n$whenScope->setWhen('this_month'); // Or use constant \\\\FoxSocial\\\\Platform\\\\Support\\\\Browse::WHEN_THIS_MONTH\n\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`If you want override platform Scope:`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`namespace Modules\\\\Photo\\\\Support\\\\Browse\\\\Scopes\\\\Album;\n\nclass SortScope extends \\\\FoxSocial\\\\Platform\\\\Support\\\\Browse\\\\Scopes\\\\SortScope\n{\n    public const SORT_MOST_PHOTO = 'most_photo';\n\n    public function apply(Builder $builder, Model $model)\n    {\n        parent::apply($builder, $model);\n\n        $table = $model->getTable();\n        $sort = $this->getSort();\n        $sortType = $this->getSortType();\n\n        if ($sort == self::SORT_MOST_PHOTO) {\n            $builder->orderBy($this->alias($table, 'total_photo'), $sortType);\n            $builder->orderBy($this->alias($table, 'id'), $sortType);\n        }\n    }\n}\n\n`}</code></pre>\n    <p>{`Usage:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`\n$sortScope = new  \\\\Modules\\\\Photo\\\\Support\\\\Browse\\\\Scopes\\\\Album\\\\SortScope();\n$sortScope->setSort('recent');\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"permissions\"\n    }}>{`Permissions`}</h2>\n    <p>{`To check permission:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`$user->hasPermissionTo('blog.create');\nAuth::user()->hasPermissionTo('blog.create');\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"privacy-1\"\n    }}>{`Privacy`}</h2>\n    <p>{`To check privacy, you should rely on:`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`core_privacy:`}</p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`Everyone: privacy_id = 1. It's privacy of sitewide. It's like a constant. Use directly is ok.`}</li>\n          <li parentName=\"ul\">{`Friends: per User will have a privacy with privacy_type = user_friends and privacy = 1`}</li>\n          <li parentName=\"ul\">{`Only Me: per User will have a privacy with privacy_type = user_private and privacy = 3`}</li>\n          <li parentName=\"ul\">{`Custom Privacy: an User can have unlimited custom privacy. Example if you created a friend list id = 1.\nYou will have a privacy record with: item_id = 1, item_type = friend_list, privacy = 4, privacy_type = user_friend_list.`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`core_privacy_members: user_id, privacy_id`}</p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`To define user_id = 1 can see privacy Friends of user 2 or not:`}\n            <ul parentName=\"li\">\n              <li parentName=\"ul\">{`Find privacy_id of User 2 with user_private = user_friends, example privacy_id = 100. If we have record user_id = 1, privacy_id = 100 => user 1 has ability to view privacy_id 100.`}</li>\n            </ul>\n          </li>\n          <li parentName=\"ul\">{`Note: owner of a privacy will always has a record in this table.`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`core_privacy_streams: id, privacy_id, item_id, item_type`}</p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`Stored privacy of items.`}</li>\n          <li parentName=\"ul\">{`If Item have x privacy custom friend list, Item will have x stream records.`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`blog_privacy_streams: your module stream. It's a children of core_privacy_streams.`}</p>\n      </li>\n    </ul>\n    <h3 {...{\n      \"id\": \"easier-way-browse-stream\"\n    }}>{`Easier way: browse stream.`}</h3>\n    <p>{`As mentioned above, FoxSocial\\\\Platform\\\\Support\\\\Browse\\\\Scopes\\\\PrivacyScope can take this logic, just feel free to use it.`}</p>\n    <h2 {...{\n      \"id\": \"userprivacy\"\n    }}>{`UserPrivacy`}</h2>\n    <p>{`It's user privacy settings.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`UserPrivacy::hasAccess($user->entityId(), $owner->entityId(), 'profile.view_profile')\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"policy\"\n    }}>{`Policy`}</h2>\n    <p>{`Policy is AccessControl in Fox4. Go to company/blog/src/Policies you will see something like BlogPolicy`}</p>\n    <p>{`Example to check can able to create Blog, we will combine Permission, Privacy, User Privacy.`}</p>\n    <p>{`Always check 5 levels.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`use FoxSocial\\\\Platform\\\\Support\\\\Facades\\\\PrivacyPolicy;\nuse Modules\\\\User\\\\Support\\\\Facades\\\\UserPrivacy;\nuse FoxSocial\\\\Platform\\\\Facades\\\\Settings;\nuse Modules\\\\Blog\\\\Models\\\\Blog;\nuse FoxSocial\\\\Platform\\\\Contracts\\\\Content as Resource;\nuse FoxSocial\\\\Platform\\\\Contracts\\\\User as User;\n\nclass BlogPolicy\n{\n    protected string $type = Blog::class;\n\n    public function view(User $user, Content $resource) {\n\n        // 1. Check role/permission.\n        if (!$user->hasPermissionTo('blog.view')) {\n            return false;\n        }\n\n        $owner = $resource->owner;\n\n        // 2. Check can view on owner.\n        if (!PrivacyPolicy::checkPermissionOwner($user, $owner)) {\n            return false;\n        }\n\n        // 3. Check owner user privacy setting of resource. Example: can_view_blog_on_owner\n        if (UserPrivacy::hasAccess($user->entityId(), $owner->entityId(), 'blog.can_view_blog_on_owner') == false) {\n            return false;\n        }\n\n        // 4. Check resource setting.\n        if ($resource->is_pending == true) {\n            if (Settings::get('blog.can_view_pending') == false) {\n                return false;\n            }\n        }\n\n        // 4.1 Or setting can be disable resource privacy.\n        if (Settings::get('blog.privacy_enabled') == true) {\n            return true;\n        }\n\n        // 5. Check can view on resource.\n        if (PrivacyPolicy::checkPermission($user, $resource) == false) {\n            return false;\n        }\n\n        return true;\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"feature-sponsor-approve\"\n    }}>{`Feature, Sponsor, Approve`}</h2>\n    <p>{`Model`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`use FoxSocial\\\\Platform\\\\Contracts\\\\HasApprove;\nuse FoxSocial\\\\Platform\\\\Contracts\\\\HasFeature;\nuse FoxSocial\\\\Platform\\\\Contracts\\\\HasSponsor;\n\nclass Photo extends Model implements Content, HasFeature, HasSponsor,HasApprove\n{\n  // ....\n}\n`}</code></pre>\n    <p>{`RepositoryInterface`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`use FoxSocial\\\\Platform\\\\Contracts\\\\HasApprove;\nuse FoxSocial\\\\Platform\\\\Contracts\\\\HasFeature;\nuse FoxSocial\\\\Platform\\\\Contracts\\\\HasSponsor;\n\ninterface PhotoRepositoryInterface\n{\n    /**\n     * @param int $id\n     * @param int $feature\n     *\n     * @return bool\n     */\n    public function feature(int $id, int $feature): bool;\n\n    /**\n     * @param HasFeature $model\n     *\n     * @return bool\n     */\n    public function isFeature(HasFeature $model): bool;\n\n    /**\n     * @param int $limit\n     *\n     * @return Paginator\n     */\n    public function findFeature(int $limit = 4): Paginator;\n\n    /**\n     * @param int $id\n     * @param int $sponsor\n     *\n     * @return bool\n     */\n    public function sponsor(int $id, int $sponsor): bool;\n\n    /**\n     * @param HasSponsor $model\n     *\n     * @return bool\n     */\n    public function isSponsor(HasSponsor $model): bool;\n\n    /**\n     * @param int $limit\n     *\n     * @return Paginator\n     */\n    public function findSponsor(int $limit = 4): Paginator;\n\n    /**\n     * @param int $id\n     *\n     * @return bool\n     */\n    public function approve(int $id): bool;\n\n    /**\n     * @param HasApprove $model\n     *\n     * @return bool\n     */\n    public function isPending(HasApprove $model): bool;\n}\n`}</code></pre>\n    <p>{`Repository`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`namespace Modules\\\\Photo\\\\Repositories\\\\Eloquent;\n\nuse FoxSocial\\\\Platform\\\\Support\\\\Repository\\\\HasFeatured;\nuse FoxSocial\\\\Platform\\\\Support\\\\Repository\\\\HasSponsor;\nuse FoxSocial\\\\Platform\\\\Support\\\\Repository\\\\HasApprove;\n\nclass PhotoRepository extends AbstractRepository implements PhotoRepositoryInterface\n{\n    use HasFeatured;\n    use HasSponsor;\n    use HasApprove;\n    // ....\n}\n`}</code></pre>\n    <p>{`Policy`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`class PhotoPolicy\n{\n /**\n     * Determine whether the user can feature the model.\n     *\n     * @param User     $user\n     * @param resource $resource\n     * @param int|null $featureUpdateValue\n     *\n     * @return bool\n     */\n    public function feature(User $user, Resource $resource, int $featureUpdateValue = null): bool\n    {\n        if ($resource instanceof HasFeature) {\n            if ($featureUpdateValue != null) {\n                if ($featureUpdateValue == $resource->is_featured) {\n                    return false;\n                }\n            }\n\n            if ($user->hasPermissionTo('photo.feature')) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n     /**\n     * Determine whether the user can sponsor the model.\n     *\n     * @param User     $user\n     * @param resource $resource\n     * @param int|null $sponsorUpdateValue\n     *\n     * @return bool\n     */\n    public function sponsor(User $user, Resource $resource, int $sponsorUpdateValue = null): bool\n    {\n        if ($resource instanceof HasSponsor) {\n            if ($sponsorUpdateValue != null) {\n                if ($sponsorUpdateValue == $resource->is_sponsor) {\n                    return false;\n                }\n            }\n\n            if ($user->hasPermissionTo('photo.sponsor')) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Determine whether the user can approve the model.\n     *\n     * @param User          $user\n     * @param resource|null $resource $resource\n     *\n     * @return bool\n     */\n    public function approve(User $user, Resource $resource = null): bool\n    {\n        if ($resource instanceof HasApprove) {\n            if (Photo::IS_APPROVED == $resource->is_approved) {\n                return false;\n            }\n        }\n\n        if (!$user->hasPermissionTo('photo.approve')) {\n            return false;\n        }\n\n        return true;\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"text\"\n    }}>{`Text`}</h2>\n    <p>{`Separate Content Model with Content Model's Text. Example: Blog and BlogText (blog_id, text, text_parsed).`}</p>\n    <h3 {...{\n      \"id\": \"verify-content-before-saving-to-database\"\n    }}>{`Verify content before saving to database`}</h3>\n    <p>{`FoxSocial\\\\Platform\\\\Support\\\\Parse\\\\Input`}</p>\n    <p>{`Feel free to improve this class.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`prepare(string \\\\$text):`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`parse_input()->prepare('text');\n// or\nresolve(Input::class)->prepare('text');\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`clean(string $string, int $limit)`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`parse_input()->clean('text', 2);\n// or\nresolve(Input::class)->clean('text', 2);\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"categorize\"\n    }}>{`Categorize`}</h2>\n    <p>{`A Content sometimes has category .... `}{`[TBD]`}</p>\n    <h2 {...{\n      \"id\": \"unit-test\"\n    }}>{`Unit Test`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`All tests MUST be in company/blog/tests/Unit.`}</li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}