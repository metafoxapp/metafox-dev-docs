(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{mm8v:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return r})),n.d(t,"default",(function(){return m}));var l=n("Fcif"),a=n("+I+c"),o=(n("mXGw"),n("/FXl")),i=n("TjRS"),r=(n("aD51"),{});void 0!==r&&r&&r===Object(r)&&Object.isExtensible(r)&&!r.hasOwnProperty("__filemeta")&&Object.defineProperty(r,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/public/frontend/layout.mdx"}});var s={_frontmatter:r},c=i.a;function m(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(o.b)(c,Object(l.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h2",{id:"comments"},"Comments"),Object(o.b)("p",null,"phpFox build system scan code to check declaration."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-tsx"},"/**\n * @type: itemView\n * name: blog.itemView.mainCard\n * keywords: blog\n * description:\n * previewImage:\n * deps:\n * priority: sort orthers.\n */\n")),Object(o.b)("p",null,"@type:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"itemView"),": Declare grid/list item view component."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"embedView"),": Declare embedView in feed/notification/search embed view component."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"block"),": Declare configurably block view component."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"saga"),": Declare redux saga effects."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"reducer"),": Declare redux reducer function.")),Object(o.b)("h2",{id:"filename"},"Filename"),Object(o.b)("p",null,"file types:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"messages.json: Declare translation objects."),Object(o.b)("li",{parentName:"ul"},"layouts.json: Declare layout configuration objects.")),Object(o.b)("h2",{id:"naming"},"Naming"),Object(o.b)("p",null,"Export Component Naming"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Item view: ","[resource_type]",".itemView.","*",", etc: blog.itemView.mainCard, blog.itemView.smallFlat"),Object(o.b)("li",{parentName:"ul"},"Embed item view: ","[resource_type]",".embedView.","*",", etc: blog.embedItem.basic"),Object(o.b)("li",{parentName:"ul"},"Form Field: form.field.","[name]",": etc: form.field.text, form.field.upload"),Object(o.b)("li",{parentName:"ul"},"Block Component: ","[module_name]",".block.","[name]",", etc: core.block.listview")),Object(o.b)("h2",{id:"layout-size"},"Layout Size"),Object(o.b)("p",null,"Layout configrations are seprarated by viewport sizes:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"<=375: xxsmall"),Object(o.b)("li",{parentName:"ul"},"<=480 : xsmall"),Object(o.b)("li",{parentName:"ul"},"<=767 : small"),Object(o.b)("li",{parentName:"ul"},"<=991 : medium"),Object(o.b)("li",{parentName:"ul"},"<=1199: large"),Object(o.b)("li",{parentName:"ul"},">","= 1200: xlarge")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"How to detect layout variants")),Object(o.b)("p",null,"Image that users is view user.profile page in ",Object(o.b)("inlineCode",{parentName:"p"},"medium")," viewport size, but administrators had not define particular layout configuration.\nLayout service will check size variants from up to down size priority: ",Object(o.b)("inlineCode",{parentName:"p"},"medium"),", ",Object(o.b)("inlineCode",{parentName:"p"},"small"),", ",Object(o.b)("inlineCode",{parentName:"p"},"xsmall"),", ",Object(o.b)("inlineCode",{parentName:"p"},"xxsmall"),", ",Object(o.b)("inlineCode",{parentName:"p"},"large"),", ",Object(o.b)("inlineCode",{parentName:"p"},"xlarge"),"."),Object(o.b)("p",null,"Check detail of selection:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"xxsmall: xxsmall, xsmall, small, medium, large, xlarge"),Object(o.b)("li",{parentName:"ul"},"xsmall: xsmall, xxsmall, small, medium, large, xlarge"),Object(o.b)("li",{parentName:"ul"},"small: small, xsmall, xxsmall, medium, large, xlarge"),Object(o.b)("li",{parentName:"ul"},"medium: medium, small, xsmall, xxsmall, large, xlarge"),Object(o.b)("li",{parentName:"ul"},"large: large, medium, small, xsmall, xxsmall, xlarge"),Object(o.b)("li",{parentName:"ul"},"xlarge: xlarge, large, medium, small, xsmall, xxsmall")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"When to detect layout size variants")),Object(o.b)("p",null,"For performance reasons, layout size variants will at page start rendering time, It means layout does not apply when user resize viewport."),Object(o.b)("h2",{id:"layout-elements"},"Layout Elements"),Object(o.b)("h3",{id:"block"},"Block"),Object(o.b)("p",null,"A Block is a react component that site administrators can add/remove/configure/drag-drop to layout ",Object(o.b)("inlineCode",{parentName:"p"},"slot")),Object(o.b)("h3",{id:"slot"},"Slot:"),Object(o.b)("p",null,"A slot is area which site administrators can put block,"),Object(o.b)("p",null,"Slot can contain others slot."),Object(o.b)("h4",{id:"actions"},"actions:"),Object(o.b)("h5",{id:"resize"},"Resize"),Object(o.b)("p",null,"Resize a slot for responsive viewport size as small, medium, and more."),Object(o.b)("h5",{id:"split"},"Split"),Object(o.b)("p",null,"Split a slot into vertical direction. It's is not usually but requiredment to build complex layout."),Object(o.b)("h5",{id:"add-slot"},"Add Slot"),Object(o.b)("p",null,"Add others siblings slot in start/end of current slot."),Object(o.b)("h3",{id:"section"},"Section"),Object(o.b)("p",null,"Section similar to material-ui Container component, it's define a row in layouts."),Object(o.b)("h4",{id:"actions-1"},"actions:"),Object(o.b)("h5",{id:"settings"},"Settings"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"}," maxWidth ")),Object(o.b)("p",null,"Values: 'lg'| 'md'| 'sm'| 'xl'| 'xs'| false"),Object(o.b)("p",null,"Determine the max-width of the container. The container width grows with the size of the screen. Set to false to disable maxWidth."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"}," disableGutters ")),Object(o.b)("p",null,"If true, the left and right padding is removed."),Object(o.b)("h5",{id:"remove"},"Remove"),Object(o.b)("h5",{id:"add-new-slot"},"Add new slot"),Object(o.b)("h3",{id:"item-view"},"Item View"),Object(o.b)("p",null,"Item View is a component that implements UI for a single item in a listing block, etc: featured members, activity feeds:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-tsx"},"// file blog/src/components/BlogItemView.tsx\nexport type BlogItemShape = {\n  title: string;\n  description: string;\n} & ItemShape;\n\nconst BlogItemView = ({ item, itemProps }: ItemViewProps<BlogItemShape>) => {\n  const to = `/blog/view/${item.id}`;\n  const classes = useStyles();\n  const cover = /string/i.test(typeof item.image)\n    ? item.image\n    : item.image['500'];\n\n  const [control, state] = useActionControl<{}>(item, {\n    menuOpened: false\n  });\n\n  return (\n    <div className={classes.root}>\n      <div className={classes.outer}>\n        <Link to={to} className={classes.media}>\n          <span\n            className={classes.mediaBg}\n            style={{ backgroundImage: `url(${cover})` }}\n          />\n        </Link>\n        <div className={classes.inner}>\n          <div className={classes.header}>\n            <Link to={to} className={classes.title}>\n              {item.title}\n            </Link>\n            <ItemActionMenu state={state} handleAction={control} />\n          </div>\n          <p>{item.description}</p>\n          <Statistic\n            values={item.statistic}\n            display={'total_like,total_view'}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default BlogItemView;\n")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-tsx"},"// file blog/src/views.tsx\nimport BlogItemView from './components/BlogItemView';\nexport default {\n  'blog.itemView.card': BlogItemView\n};\n")),Object(o.b)("h2",{id:"loading-skeleton"},"Loading Skeleton"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-tsx"},"// file blog/src/components/BlogItemView.tsx\n\nconst LoadingSkeleton = ({ itemProps }) => {\n  const classes = useStyles();\n  return (\n    <div className={classes.root}>\n      <div className={classes.outer}>\n        <div className={classes.media}>\n          <Skeleton variant=\"rect\" height={120} component={'div'} />\n        </div>\n        <div className={classes.inner}>\n          <Skeleton />\n          <Skeleton />\n          <Skeleton />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nBlogItemView.LoadingSkeleton = LoadingSkeleton;\n\nexport default BlogItemView;\n")),Object(o.b)("h2",{id:"listing-block"},"Listing Block"),Object(o.b)("p",null,"In most case, You will create new block components by extends other block"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-tsx"},"import createBlock from '@metafox/core/createBlock';\nimport { ListViewBlockProps } from '@metafox/core/types';\n\nconst BlogListingBlock = createBlock<ListViewBlockProps>({\n  extendBlock: 'core.block.listview', // extend from block\n  name: 'BlogListingBlock', // based Block compoinent\n  overrides: {\n    // override properties automacally merged to targed component\n    contentType: 'blog', // layout editor will load view prefix by `contentType.itemView.*` to select itemView.\n    dataSource: { apiUrl: '/blog' }\n  },\n  defaults: {\n    // default properties show in layout editor,\n    // only property show in defaults AND NOT in overrides will be show in editor.\n    title: 'Blogs',\n    blockProps: { variant: 'contained' },\n    itemView: 'blog.itemView.mainCard',\n    gridContainerProps: { spacing: 2 },\n    gridItemProps: { xs: 12, sm: 12, md: 12, lg: 12, xl: 12 }\n  }\n});\n\nexport default BlogListingBlock;\n")),Object(o.b)("h2",{id:"side-menu-block"},"Side Menu Block"),Object(o.b)("p",null,"Create a side menu block"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-tsx"},"import createBlock from '@metafox/core/createBlock';\nimport { SideMenuBlockProps as Props } from '@metafox/core/types';\n\nconst BlogSideMenuBlock = createBlock<Props>({\n  extendBlock: 'core.block.sideNavigation',\n  name: 'BlogSideMenuBlock',\n  displayName: 'Blog Menu',\n  keywords: 'blogs, navigation, menu',\n  description: '',\n  previewImage: '',\n  overrides: {\n    menuItems: [\n      {\n        to: '/blog',\n        label: 'All Blogs',\n        active: true\n      },\n      {\n        to: '/blog?view=my',\n        label: 'My Blogs'\n      },\n      {\n        to: '/blog?view=friend',\n        label: \"Friend's Blogs\"\n      }\n    ]\n  },\n  defaults: {\n    title: 'Blogs',\n    blockProps: { variant: 'plained', noHeader: true, noFooter: false }\n  }\n});\n\nexport default BlogSideMenuBlock;\n")),Object(o.b)("h2",{id:"side-category"},"Side Category"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-tsx"},"import createBlock from '@metafox/core/createBlock';\nimport { CategoryBlockProps } from '@metafox/core/types';\n\nconst SideCategoryBlock = createBlock<CategoryBlockProps>({\n  extendBlock: 'core.categoryBlock', // based Block compoinent\n  name: 'BlogCategoryBlock', // React component name\n  displayName: 'Blog Categories', // display in layout editor\n  keywords: 'blogs, category', // keyword to search on layout editor\n  description: '', // description in layout editor\n  previewImage: '', // preview image in layout editor 200x200\n  overrides: {\n    // overrides properties will apply to derived blog automacally.\n    dataSource: { apiUrl: '/blog-category', apiParams: '' },\n    href: '/blog/category'\n  },\n  defaults: {\n    // properties will show in edit block modal.\n    title: 'Categories',\n    blockProps: { variant: 'plained' }\n  }\n});\n\nexport default SideCategoryBlock;\n")),Object(o.b)("h2",{id:"modal"},"Modal"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-tsx"},"<Link to={'/m/example/simple-modal'}>/m/example/simple-modal</Link>\n")))}void 0!==m&&m&&m===Object(m)&&Object.isExtensible(m)&&!m.hasOwnProperty("__filemeta")&&Object.defineProperty(m,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/public/frontend/layout.mdx"}}),m.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-public-frontend-layout-mdx-40c442f6e364e237e15b.js.map