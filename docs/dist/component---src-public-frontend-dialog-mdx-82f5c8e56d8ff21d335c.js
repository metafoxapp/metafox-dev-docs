(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{MuXf:function(e,n,t){"use strict";t.r(n),t.d(n,"_frontmatter",(function(){return s})),t.d(n,"default",(function(){return d}));var a=t("Fcif"),o=t("+I+c"),l=(t("mXGw"),t("/FXl")),i=t("TjRS"),s=(t("aD51"),{});void 0!==s&&s&&s===Object(s)&&Object.isExtensible(s)&&!s.hasOwnProperty("__filemeta")&&Object.defineProperty(s,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/public/frontend/dialog.mdx"}});var c,r=(c="DialogContentText",function(e){return console.warn("Component "+c+" was not imported, exported, or provided by MDXProvider as global scope"),Object(l.b)("div",e)}),b={_frontmatter:s},p=i.a;function d(e){var n=e.components,t=Object(o.a)(e,["components"]);return Object(l.b)(p,Object(a.a)({},b,t,{components:n,mdxType:"MDXLayout"}),Object(l.b)("p",null,"@metafox ",Object(l.b)("inlineCode",{parentName:"p"},"Dialog")," is based on ",Object(l.b)("a",{parentName:"p",href:"https://material-ui.com/components/dialogs/#dialog"},"Material-UI Dialog"),",\nWe wrapped in a Controller and ",Object(l.b)("inlineCode",{parentName:"p"},"dialogBackend")," services\nto make developers more easily to work with Dialog Component, by ",Object(l.b)("inlineCode",{parentName:"p"},"dialogBackend")," service and ",Object(l.b)("inlineCode",{parentName:"p"},"useDialog")," hooks."),Object(l.b)("h2",{id:"create-dialog"},"Create Dialog"),Object(l.b)("p",null,"Example declaration a simple dialog. Note that annotations must be begine of source file."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-tsx"},"/**\n * @type: dialog\n * name: ExampleDialog\n *\n */\n\nimport {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle\n} from '@metafox/dialog';\nimport React from 'react';\n\nexport default function ExampleDialog({\n  title,\n  message\n}}) {\n  const { useDialog } = useGlobal();\n  const { setDialogValue, dialogProps } = useDialog();\n\n  const onSubmit = () => setDialogValue(true);\n\n  const onCancel = () => setDialogValue();\n\n  return (\n    <Dialog {...dialogProps}>\n      <DialogTitle id=\"dialog-title\">{title}</DialogTitle>\n      <DialogContent>{message}</DialogContent>\n      <DialogActions>\n        <Button onClick={onCancel}>OK</Button>\n        <Button onClick={onSubmit}>Cancel</Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n")),Object(l.b)("h2",{id:"export-dialog"},"Export Dialog"),Object(l.b)("p",null,"Using @metafox annotations syntax to use the created dialog."),Object(l.b)("p",null,"etc: this source defines a dialog named ",Object(l.b)("inlineCode",{parentName:"p"},"sampleModalDialog")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-text"},"/**\n * @type: dialog\n * name: sampleModalDialog\n */\n")),Object(l.b)("h2",{id:"present"},"Present"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-tsx"},"const value = await dialogBackend.present({\n  component: 'sampleModalDialog',\n  props: {\n    title: 'Simple Dialog Title',\n    message:\n      'This is simple dialog demo, you can extends with others function laters.'\n  }\n});\n\nIn order to present dialog, pass compnent = \"sampleModalDialog\" to dialogBackend.\n\ndialogBackend\n  .present({\n    component: 'sampleModalDialog',\n    props: {\n      title: 'Simple Dialog Title',\n      message:\n        'This is simple dialog demo, you can extends with others function laters.'\n    }\n  })\n  .then(value => {\n    // your code\n  });\n")),Object(l.b)("h3",{id:"alert"},"Alert"),Object(l.b)("p",null,"Single line message"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-tsx"},"dialogBackend.alert({\n  title: 'Alert',\n  messsage: 'You can not delete this content!'\n});\n")),Object(l.b)("p",null,"Multiple line message"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-tsx"},"dialogBackend.alert({\n  message:\n    '- Checking the network cables, modem, and router\\n- Reconnecting to Wi-Fi'\n});\n")),Object(l.b)("p",null,"Message Component"),Object(l.b)("p",null,"Content of message should be wrapped in ",Object(l.b)(r,{mdxType:"DialogContentText"})," to keep consistent look and feel."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-tsx"},"dialogBackend.alert({\n  message: (\n    <DialogContentText>\n      Checking the network cables, modem, and router\n    </DialogContentText>\n  )\n});\n")),Object(l.b)("h3",{id:"confirm"},"Confirm"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-tsx"},"const ok: boolean = await dialogBackend.confirm({\n  title: 'Confirm',\n  messsage: 'Are you sure?'\n});\n")),Object(l.b)("p",null,"Message content is similar to alert method."),Object(l.b)("p",null,"Custom Button"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-tsx"},"const ok: boolean = await dialogBackend.confirm({\n  title: 'Confirm',\n  messsage: 'Are you sure?'\n});\n")),Object(l.b)("h3",{id:"dismiss"},"Dismiss"),Object(l.b)("p",null,"Dismiss presenting dialog"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-tsx"},"dialogBackend.dimiss();\n")),Object(l.b)("h3",{id:"dismiss-all"},"Dismiss All"),Object(l.b)("p",null,"Dimiss all dialog"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-tsx"},"dialogBackend.dismiss(true);\n")),Object(l.b)("h3",{id:"dialog-form"},"Dialog Form"),Object(l.b)("p",null,"Using ",Object(l.b)("inlineCode",{parentName:"p"},"setDialogValue")," to set value for current promise call."))}void 0!==d&&d&&d===Object(d)&&Object.isExtensible(d)&&!d.hasOwnProperty("__filemeta")&&Object.defineProperty(d,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/public/frontend/dialog.mdx"}}),d.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-public-frontend-dialog-mdx-82f5c8e56d8ff21d335c.js.map