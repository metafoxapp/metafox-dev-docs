(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{y6NN:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return o})),n.d(t,"default",(function(){return b}));var a=n("Fcif"),l=n("+I+c"),r=(n("mXGw"),n("/FXl")),c=n("TjRS"),o=(n("aD51"),{});void 0!==o&&o&&o===Object(o)&&Object.isExtensible(o)&&!o.hasOwnProperty("__filemeta")&&Object.defineProperty(o,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/public/backend/concepts.mdx"}});var s={_frontmatter:o},i=c.a;function b(e){var t=e.components,n=Object(l.a)(e,["components"]);return Object(r.b)(i,Object(a.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("h1",{id:"concepts"},"Concepts"),Object(r.b)("p",null,"This document explain platform concepts, it's helpful for developers base knowledge\nabout platform."),Object(r.b)("p",null,"The implementation guide will be described in other parts."),Object(r.b)("h2",{id:"model"},"Model"),Object(r.b)("p",null,"When we store data to database, it's a record."),Object(r.b)("p",null,"When we map a record of database to php class (using Eloquent) it's be come a Model."),Object(r.b)("p",null,"When we present a model to frontend (via controller) model becomes resource."),Object(r.b)("p",null,"sometimes you hear about entity but there are a diffence between resource vs entity."),Object(r.b)("p",null,"Both resource and entity has their types."),Object(r.b)("p",null,"Resources are unique to their type while entities are not."),Object(r.b)("h2",{id:"user-vs-content"},"User vs Content"),Object(r.b)("p",null,"When surfacing @metafox"),Object(r.b)("p",null,"blogs, videos, photo, .... has detail page.\nUsers can comment, share, like, ... on their detail page."),Object(r.b)("p",null,"Friends list, saved, report item, ... has no detail page.\nUsers can not coment, share, like to these items."),Object(r.b)("p",null,"User, Pages, Groups have it's profile pages (detail page), activity stream, privacy settings, and owner of other blogs, videos, ... etc"),Object(r.b)("p",null,"In order to abstract types of theme into programing concepts, we categorize theme into ",Object(r.b)("strong",{parentName:"p"},"Content")," and ",Object(r.b)("strong",{parentName:"p"},"User")),Object(r.b)("h3",{id:"content"},"Content"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Have unique id in their types"),Object(r.b)("li",{parentName:"ul"},"Has its privacy value"),Object(r.b)("li",{parentName:"ul"},"Have detail page"),Object(r.b)("li",{parentName:"ul"},"Can like, comment, share")),Object(r.b)("p",null,"blogs, video, photos are ",Object(r.b)("strong",{parentName:"p"},"Content")),Object(r.b)("h3",{id:"user"},"User"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Have profile page"),Object(r.b)("li",{parentName:"ul"},"Can have others contents (blogs, videos, ...)"),Object(r.b)("li",{parentName:"ul"},"Have their activity stream"),Object(r.b)("li",{parentName:"ul"},"User can logged in as")),Object(r.b)("p",null,"users, pages, groups as ",Object(r.b)("strong",{parentName:"p"},"User")),Object(r.b)("p",null,"now we can call page, group as page user, group user as abstraction."),Object(r.b)("h2",{id:"membership"},"Membership"),Object(r.b)("p",null,"When a user is logged in"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"he can send friend request to become friends of others."),Object(r.b)("li",{parentName:"ul"},"he can assign his friends to a his friend lists."),Object(r.b)("li",{parentName:"ul"},"he can send member request to become group member."),Object(r.b)("li",{parentName:"ul"},"he can like a page to become members of page.")),Object(r.b)("p",null,"When logged in as group user"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"he can assign a members to be group admin, etc")),Object(r.b)("p",null,"We call these relationship are membership."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"membership")," is relationship of two ",Object(r.b)("strong",{parentName:"p"},"User")),Object(r.b)("p",null,"User are owner of these membership"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"his friends"),Object(r.b)("li",{parentName:"ul"},"his friend lists")),Object(r.b)("p",null,"Group User's memberships"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"group members"),Object(r.b)("li",{parentName:"ul"},"group admins")),Object(r.b)("p",null,"Page User's memberships"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"page members"),Object(r.b)("li",{parentName:"ul"},"page admins")),Object(r.b)("h2",{id:"privacy"},"Privacy"),Object(r.b)("p",null,"When users post a blog, video ... on their profile page,\nThey can set who can see their posts?"),Object(r.b)("p",null,"They use their own memberships"),Object(r.b)("p",null,"etc:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"friends"),Object(r.b)("li",{parentName:"ul"},"a specific friend list")),Object(r.b)("p",null,"In order keep clean of design, privacy should be centralized to a place, so it's have a global unique id.\nThen we can map ",Object(r.b)("inlineCode",{parentName:"p"},"membership")," to ",Object(r.b)("inlineCode",{parentName:"p"},"privacy")," concept as simple as possible."),Object(r.b)("h2",{id:"action-entity"},"Action Entity"),Object(r.b)("p",null,"When users do something, example: like, share, friend request v.v... Those Models are called ActionEntity."),Object(r.b)("p",null,"It is similar to Content, but ActionEntity is defined who did the action on a Content (can be Content or User - since User was a child of Content)."),Object(r.b)("h2",{id:"role--permissions"},"Role & Permissions"),Object(r.b)("p",null,"Think role as phpfox v4 ",Object(r.b)("strong",{parentName:"p"},"user_group")),Object(r.b)("p",null,"Think permissions as phpfox v4 ",Object(r.b)("strong",{parentName:"p"},"user_group_params"),". Has two type:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Permission with boolean value"),Object(r.b)("li",{parentName:"ul"},"Permission with actual value")),Object(r.b)("h2",{id:"policy"},"Policy"),Object(r.b)("p",null,"When user post a comment, write a blogs, share a content ... developers have to check permissions he can\ndo that actions by role & permission."),Object(r.b)("p",null,"When he post on others profile pages, we also have to check owner's membership and privacy."),Object(r.b)("p",null,"To reduce duplicated and keep code clean, we centralize all check permission, privacy to ",Object(r.b)("strong",{parentName:"p"},"Policy")," class."),Object(r.b)("p",null,"In Policy, every action we have 5 privacy layers:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Role/Permission")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-php"},"$user->hasPermissionTo('resource.view'); // return bool.\n")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Privacy Owner")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-php"},"use FoxSocial\\Platform\\Support\\Facades\\PrivacyPolicy;\n\nPrivacyPolicy::checkPermissionOwner($user, $owner); // return bool.\n")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"User Privacy Setting of Owner")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-php"},"use Modules\\User\\Support\\Facades\\UserPrivacy;\n\nUserPrivacy::hasAccess($user->entityId(), $owner->entityId(), 'blog.view_browse_blogs'); // return bool.\n")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Resource Setting: consider to use it on which level depends on context.")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-php"},"use FoxSocial\\Platform\\Facades\\Settings;\n\nSettings::get('blog.privacy_enabled'); // return mixed (your module is free to define var type).\n\n")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Privacy Resource")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-php"},"use FoxSocial\\Platform\\Support\\Facades\\PrivacyPolicy;\n\nPrivacyPolicy::checkPermission($user, $resource); // return bool.\n")),Object(r.b)("h2",{id:"event"},"Event"),Object(r.b)("p",null,"Laravel's event is a implementation of ",Object(r.b)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Observer_pattern"},"Observer Pattern")),Object(r.b)("p",null,"In thinking, event is a replacement of phpFox plugins."),Object(r.b)("p",null,"event is simple way to decouple package dependencies and extends platform features."),Object(r.b)("h3",{id:"using-event-to-notify-an-action"},"using event to notify an action"),Object(r.b)("p",null,"When a new user registered, we should notify an action ",Object(r.b)("inlineCode",{parentName:"p"},"user_created")," with ",Object(r.b)("inlineCode",{parentName:"p"},"$user")," data."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-php"},"events()->dispatch('user_created', $user);\n")),Object(r.b)("p",null,"all listeners registered to action ",Object(r.b)("inlineCode",{parentName:"p"},"user_registered")," will handle the action as"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-php"},"class UserCreatedListener\n{\n  public function handle($user){\n      // put your code here\n  }\n}\n")),Object(r.b)("h3",{id:"using-event-to-interact"},"using event to interact"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-php"},"$response = event()->dispatch('get_module_settings');\n")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-php"},"class ModuleSettingListener\n{\n  function handle()\n  {\n    return ['add_new_setting'=>['database_down']];\n  }\n}\n")),Object(r.b)("h3",{id:"using-event-to-call-others-module-api"},"using event to call others module api"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-php"},"event()->dispatch('create_new_feed', $action);\n")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-php"},"class CreateFeedActionHandler\n{\n  public function handle($action)\n  {\n      $feedService->createAction($action);\n  }\n}\n")),Object(r.b)("h2",{id:"model-observer"},"Model Observer"),Object(r.b)("p",null,"Model observer is integration of Eloquent model and event system with events\ncreating, created, updating, updated, deleting, deleted."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-php"},"class PostObserver\n{\n\n  public function creating($post)\n  {\n    // this method is invoked automatically when Blog is created\n  }\n\n\n  public function created($post)\n  {\n    // this method is invoked automatically when Blog is created\n  }\n\n  // others\n}\n")),Object(r.b)("h2",{id:"feed--stream"},"Feed & Stream"),Object(r.b)("p",null,"When user post blogs, video, photo, ... platform centralized actions into feed, then following users can see and interact with."),Object(r.b)("p",null,"platform keep in as simple as possible, it contains:"),Object(r.b)("p",null,"feed(item_type, item_id, user_id, user_type, owner_id, owner_type, type_id)"),Object(r.b)("p",null,"item_type, item_id: to specify item talking about"),Object(r.b)("p",null,"user_type, user_id: to specific user who is created item"),Object(r.b)("p",null,"owner_type, owner_id: to specific where it's posted to (other users, on a page, on a group v.v...)"),Object(r.b)("p",null,"type_id: to categorize feed, feed abilities: ",Object(r.b)("strong",{parentName:"p"},"can_comment"),", ",Object(r.b)("strong",{parentName:"p"},"can_like"),", ",Object(r.b)("strong",{parentName:"p"},"can_share"),", ",Object(r.b)("strong",{parentName:"p"},"can_edit"),", ",Object(r.b)("strong",{parentName:"p"},"can_create_feed"),", ",Object(r.b)("strong",{parentName:"p"},"can_put_stream"),"."),Object(r.b)("p",null,"When a feed is created, how to deliver it ?"),Object(r.b)("p",null,"The trouble comes when feed owner set privacy to many friend lists. We can not keep many privacy in single feed record, So we put feed + privacy to other feed_stream tables."),Object(r.b)("p",null,"It contains feed_id, privacy_id, owner_id so we can deliver feed in flexible way."),Object(r.b)("p",null,"privacy_id: to specify who can see"),Object(r.b)("p",null,"owner_id: to specify profile page"),Object(r.b)("h2",{id:"storage--disk"},"Storage & Disk"),Object(r.b)("p",null,"We have core_storage_services : currently we support s3 and local. Per service we can have multiple config instances (core_storage)."),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Config in config/filesystems.php")),Object(r.b)("h2",{id:"scope"},"Scope"),Object(r.b)("p",null,"When you want to add custom query to Query Builder, use Scope. phpFox support:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",{parentName:"li",href:"https://laravel.com/docs/8.x/eloquent#global-scopes"},"Global scopes"),": avoid to use this because it will add to model static and apply for the whole request process."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",{parentName:"li",href:"https://laravel.com/docs/8.x/eloquent#local-scopes"},"Local scopes"),": write inside Model, but try not to write too much in Model, only write Scope that will always be used."),Object(r.b)("li",{parentName:"ul"},"Apply Scope: This is metaFox own feature. When we build query, we can create a Scope and apply it into current Query.")),Object(r.b)("p",null,"Example:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-php"},"\n$exampleScope = new ExampleScope();\n$exampleScope->setSomeAttribute('123');\n\n$model = new Model();\n$query = $model->newQuery()->applyScope($exampleScope);\n$data = $query->get();\n\n")))}void 0!==b&&b&&b===Object(b)&&Object.isExtensible(b)&&!b.hasOwnProperty("__filemeta")&&Object.defineProperty(b,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/public/backend/concepts.mdx"}}),b.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-public-backend-concepts-mdx-f26ef3c574f8c04f9b81.js.map