{"version":3,"sources":["webpack:///../src/public/frontend/validation.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---src-public-frontend-validation-mdx-edcaf88a82a550aba986.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/namnv/Sites/foxsocial/metafox-dev-docs/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"form--validation\"\n    }}>{`Form & Validation`}</h1>\n    <p>{`form validation got usually return from server api to validate on typings and before submitting.`}</p>\n    <p>{`etc:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"type\": \"object\",\n  \"properties\": {\n    \"question\": {\n      \"type\": \"string\",\n      \"required\": true,\n      \"minLength\": 3,\n      \"maxLength\": 255,\n      \"label\": \"Question\"\n    },\n    \"attachments\": {\n      \"type\": \"array\",\n      \"of\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"type\": \"number\",\n            \"required\": true\n          },\n          \"file_name\": {\n            \"type\": \"string\",\n            \"required\": true\n          }\n        }\n      },\n      \"label\": \"Attachments\"\n    }\n  }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"boolean\"\n    }}>{`Boolean`}</h2>\n    <p>{`Converting a string type json schema to a yup object will return an object the equivalent of `}<inlineCode parentName=\"p\">{`yup.boolean()`}</inlineCode>{` with all of the additional validation configuration.`}</p>\n    <h3 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`import { toYup, BooleanTypeSchema } from '@metafox/json2yup';\nimport * as yup from 'yup';\n\nconst schema: BooleanTypeSchema = {\n  type: 'boolean',\n  strict: true,\n  required: true,\n  errors: {\n    required: 'MY custom required message'\n  }\n};\n\nconst yupSchema = toYup(schema);\n\nconsole.log(yupSchema.isValidSync(true)); //true\nconsole.log(yupSchema.isValidSync(false)); //true\nconsole.log(yupSchema.isValidSync('true')); //false\nconsole.log(yupSchema.isValidSync('false')); //false\n\n// Equivalent to\n\nconst yupBooleanSchema = yup\n  .boolean()\n  .required('My custom required message')\n  .strict(true);\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"type\"\n    }}>{`Type`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`type BooleanTypeSchema = YupTypeSchema & {\n  type: 'boolean';\n  oneOf?: boolean[];\n  notOneOf?: boolean[];\n  nullable?: boolean;\n  errors?: YupTypeErrors & {\n    oneOf?: string;\n    notOneOf?: string;\n  };\n  when?: WhenSchema<BooleanTypeSchema>[];\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"array\"\n    }}>{`Array`}</h2>\n    <p>{`Converting a string type json schema to a yup object will return an object the equivalent of `}<inlineCode parentName=\"p\">{`yup.array()`}</inlineCode>{` with all of the additional validation configuration.`}</p>\n    <h3 {...{\n      \"id\": \"usage-1\"\n    }}>{`Usage`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`import { toYup, ArrayTypeSchema } from '@metafox/json2yup';\nimport * as yup from 'yup';\n\nconst schema: ArrayTypeSchema = {\n  type: 'array',\n  strict: true,\n  required: true,\n  min: 2,\n  errors: {\n    min: 'My custom min length message',\n    required: 'My custom required message'\n  }\n};\n\nconst yupSchema = toYup(schema);\n\nconsole.log(yupSchema.isValidSync(['Good', 'Morning'])); //true\nconsole.log(yupSchema.isValidSync('Hello')); //false\n\n// Equivalent to\n\nconst yupArraySchema = yup\n  .array()\n  .min(2, 'My custom min length message')\n  .required('My custom required message')\n  .strict(true);\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"type-1\"\n    }}>{`Type`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`type ArrayTypeSchema = YupTypeSchema & {\n  type: 'array';\n  of?: TypeSchemas;\n  min?: number;\n  max?: number;\n  nullable?: boolean;\n  unique?: boolean; // to compare string[], int[]\n  uniqueBy?: string; // to compare complex object\n  errors?: YupTypeErrors & {\n    min?: string;\n    max?: string;\n    unique?: boolean;\n    uniqueBy?: string;\n  };\n  when?: WhenSchema<ArrayTypeSchema>[];\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"date\"\n    }}>{`Date`}</h2>\n    <p>{`Converting a string type json schema to a yup object will return an object the equivalent of `}<inlineCode parentName=\"p\">{`yup.date()`}</inlineCode>{` with all of the additional validation configuration.`}</p>\n    <h3 {...{\n      \"id\": \"usage-2\"\n    }}>{`Usage`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`import { toYup, DateTypeSchema } from '@metafox/json2yup';\nimport * as yup from 'yup';\n\nconst schema: DateTypeSchema = {\n  type: 'date',\n  strict: true,\n  required: true,\n  min: '2020-01-01',\n  errors: {\n    min: 'MY custom min date message',\n    required: 'MY custom required message'\n  }\n};\n\nconst yupSchema = toYup(schema);\n\nconsole.log(yupSchema.isValidSync('2020-01-02')); //true\nconsole.log(yupSchema.isValidSync('2019-12-31')); //false\n\n// Equivalent to\n\nconst yupDateSchema = yup\n  .date()\n  .min(2, 'My custom min date message')\n  .required('My custom required message')\n  .strict(true);\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"type-2\"\n    }}>{`Type`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`type DateTypeSchema = YupTypeSchema & {\n  type: 'date';\n\n  /**\n   * number: as a unix timestamp in seconds\n   * string: anything parsable by \\`new Date(string)\\` e.g. '2020-12-01'\n   */\n  min?: number | string | Reference<number | string>;\n\n  /**\n   * number: as a unix timestamp in seconds\n   * string: anything parsable by \\`new Date(string)\\` e.g. '2020-12-01'\n   */\n  max?: number | string | Reference<number | string>;\n\n  nullable?: boolean;\n  errors?: YupTypeErrors & { min?: string; max?: string };\n  when?: WhenSchema<DateTypeSchema>[];\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"number\"\n    }}>{`Number`}</h2>\n    <p>{`Converting a string type json schema to a yup object will return an object the equivalent of `}<inlineCode parentName=\"p\">{`yup.number()`}</inlineCode>{` with all of the additional validation configuration.`}</p>\n    <h3 {...{\n      \"id\": \"usage-3\"\n    }}>{`Usage`}</h3>\n    <p>{`For more advanced usage, check out the `}<a parentName=\"p\" {...{\n        \"href\": \"../src/tests/types/number\"\n      }}>{`number type test suite`}</a>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`import { toYup, NumberTypeSchema } from '@metafox/json2yup';\nimport * as yup from 'yup';\n\nconst schema: NumberTypeSchema = {\n  type: 'number',\n  strict: true,\n  required: true,\n  min: 5,\n  errors: {\n    min: 'My custom min value message',\n    required: 'My custom required message'\n  }\n};\n\nconst yupSchema = toYup(schema);\n\nconsole.log(yupSchema.isValidSync(5)); //true\nconsole.log(yupSchema.isValidSync(1)); //false\n\n// Equivalent to\n\nconst yupNumberSchema = yup\n  .number()\n  .min(5, 'My custom min value message')\n  .required('My custom required message')\n  .strict(true);\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"type-3\"\n    }}>{`Type`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`type NumberTypeSchema = YupTypeSchema & {\n  type: 'number';\n  min?: number | Reference<number>;\n  max?: number | Reference<number>;\n  lessThan?: number | Reference<number>;\n  moreThan?: number | Reference<number>;\n  sign?: 'positive' | 'negative';\n  integer?: boolean;\n  oneOf?: number[];\n  notOneOf?: number[];\n  round?: 'floor' | 'ceil' | 'trunc' | 'round';\n  nullable?: boolean;\n  errors?: YupTypeErrors & {\n    min?: string;\n    max?: string;\n    lessThan?: string;\n    moreThan?: string;\n    positive?: string;\n    negative?: string;\n    integer?: string;\n    oneOf?: string;\n    notOneOf?: string;\n  };\n  when?: WhenSchema<NumberTypeSchema>[];\n};\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"ref\"\n    }}>{`Ref`}</h3>\n    <p><inlineCode parentName=\"p\">{`ref`}</inlineCode>{` is helpful in case you compare value of dependent field, currently ref support min, max, lessThan, moreThan`}</p>\n    <p>{`etc:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`const json = {\n  type: 'object',\n  properties: {\n    min_length: {\n      type: 'number',\n      min: 1,\n      max: 255\n    },\n    max_length: {\n      type: 'number',\n      min: { ref: 'min_length' }\n    }\n  }\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"object\"\n    }}>{`Object`}</h2>\n    <p>{`Converting a string type json schema to a yup object will return an object the equivalent of `}<inlineCode parentName=\"p\">{`yup.object()`}</inlineCode>{` with all of the additional validation configuration.`}</p>\n    <h3 {...{\n      \"id\": \"usage-4\"\n    }}>{`Usage`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`import { toYup, ObjectTypeSchema } from '@metafox/json2yup';\nimport * as yup from 'yup';\n\nconst schema: ObjectTypeSchema = {\n  type: 'object',\n  strict: true,\n  properties: {\n    firstName: {\n      type: 'string',\n      minLength: 2,\n      strict: true,\n      required: true,\n      errors: {\n        minLength: 'first name too short',\n        required: 'first name required'\n      }\n    },\n    lastName: {\n      type: 'string',\n      minLength: 2,\n      strict: true,\n      required: true,\n      errors: {\n        minLength: 'last name too short',\n        required: 'last name required'\n      }\n    }\n  }\n};\n\nconst yupSchema = toYup(schema);\n\nconsole.log(\n  yupSchema.isValidSync({\n    firstName: 'Bob',\n    lastName: 'Jones'\n  })\n); //true\n\nconsole.log(\n  yupSchema.isValidSync({\n    firstName: 'Bobby',\n    lastName: 'W'\n  })\n); //false\n\n// Equivalent to\n\nconst yupBooleanSchema = yup\n  .object({\n    firstName: yup\n      .string()\n      .min(2, 'first name too short')\n      .required('first name required')\n      .strict(true),\n    lastName: yup\n      .string()\n      .min(2, 'last name too short')\n      .required('last name required')\n      .strict(true)\n  })\n  .strict(true);\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"type-4\"\n    }}>{`Type`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`type ObjectTypeSchema = Omit<YupTypeSchema, 'required'> & {\n  type: 'object';\n  properties: Record<string, TypeSchemas>;\n};\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"keypath-conversion\"\n    }}>{`Keypath Conversion`}</h3>\n    <p>{`Object property keys containing dots will be automatically converted and nested into child object validation types,`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"../src/tests/types/object/withKeypaths.test.ts\"\n        }}>{`Basic Keypath Example`}</a>{`.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"../src/tests/types/object/withNestedKeypaths.test.ts\"\n        }}>{`Advanced Keypath Example`}</a>{`.`}</li>\n    </ul>\n    <p>{`The following example demonstrates how an object definition will be validated once it is converted into a YUP object. It's important to note that this dot notation keypathing can be done at any level of an object type validation schema.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`import { ObjectTypeSchema } from '@metafox/json2yup';\n\n// Property names with dot notation keypaths\n\nconst objectSchema: ObjectTypeSchema = {\n  type: 'object',\n  strict: true,\n  properties: {\n    'user.details.firstName': {\n      type: 'string',\n      required: true\n    }\n  }\n};\n\n// Will actually be converted into this object before being 'YUP-ified'\n\nconst actualObjectSchema: ObjectTypeSchema = {\n  type: 'object',\n  strict: true,\n  properties: {\n    user: {\n      type: 'object',\n      properties: {\n        details: {\n          type: 'object',\n          properties: {\n            firstName: {\n              type: 'string',\n              required: true\n            }\n          }\n        }\n      }\n    }\n  }\n};\n`}</code></pre>\n    <p>{`Platform is built-in support object uniqueBy when its direct child of array schema.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`const schema: ObjectTypeSchema = {\n  type: 'array',\n  strict: true,\n  of: {\n    type: 'object',\n    uniqueBy: 'name',\n    error: {\n      uniqueBy: 'name must be unique in list',\n    }\n    properties: {\n      name: {\n        type: 'string'\n      },\n      email: {\n        type: 'string'\n      }\n    }\n  }\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"string\"\n    }}>{`String`}</h2>\n    <p>{`Converting a string type json schema to a yup object will return an object the equivalent of `}<inlineCode parentName=\"p\">{`yup.string()`}</inlineCode>{` with all of the additional validation configuration.`}</p>\n    <h3 {...{\n      \"id\": \"usage-5\"\n    }}>{`Usage`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`import { toYup, StringTypeSchema } from '@metafox/json2yup';\nimport * as yup from 'yup';\n\nconst schema: StringTypeSchema = {\n  type: 'string',\n  strict: true,\n  required: true,\n  minLength: 5,\n  errors: {\n    minLength: 'My custom min length message',\n    required: 'My custom required message'\n  }\n};\n\nconst yupSchema = toYup(schema);\n\nconsole.log(yupSchema.isValidSync('Hello')); //true\nconsole.log(yupSchema.isValidSync('Hi')); //false\n\n// Equivalent to\n\nconst yupStringSchema = yup\n  .string()\n  .min(5, 'My custom min length message')\n  .required('My custom required message')\n  .strict(true);\n`}</code></pre>\n    <p>{`support ref to other field`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`const schema = {\n  type: 'object',\n  properties: {\n    min_password_length: {\n      type: 'number',\n      required: true\n    },\n    password: {\n      type: 'string',\n      minLength: { ref: 'min_password_length' }\n    }\n  }\n};\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"type-5\"\n    }}>{`Type`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`type StringTypeSchema = YupTypeSchema & {\n  type: 'string';\n  minLength?: number;\n  maxLength?: number;\n  case?: 'lowercase' | 'uppercase';\n  uppercase?: number;\n  matches?: { regex: string; excludeEmptyString?: boolean };\n  format?: 'email' | 'url';\n  oneOf?: string[];\n  notOneOf?: string[];\n  nullable?: boolean;\n  errors?: YupTypeErrors & {\n    minLength?: string;\n    maxLength?: string;\n    lowercase?: string;\n    uppercase?: string;\n    matches?: string;\n    email?: string;\n    url?: string;\n    oneOf?: string;\n    notOneOf?: string;\n  };\n  when?: WhenSchema<StringTypeSchema>[];\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"when\"\n    }}>{`When`}</h2>\n    <p>{`Yup allows you to alter the validation on your data depending on other values within the validated data payload using the `}<inlineCode parentName=\"p\">{`when()`}</inlineCode>{` method.`}</p>\n    <p>{`The test suite contains examples of how `}<inlineCode parentName=\"p\">{`when`}</inlineCode>{` validation configuration can be used with all the different data types.`}</p>\n    <h3 {...{\n      \"id\": \"type-6\"\n    }}>{`Type`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`type WhenSchema<T extends YupTypeSchema> = {\n  fields: string | string[];\n  is: unknown;\n  then: T;\n  otherwise?: T;\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"custom-errors\"\n    }}>{`Custom Errors`}</h2>\n    <p>{`Every schema type has an optional errors object which allow you to override the default YUP generated error messages for specific failure reasons.`}</p>\n    <p>{`For example, these are the `}<a parentName=\"p\" {...{\n        \"href\": \"../src/types/index.ts\"\n      }}>{`StringTypeSchema`}</a>{` error message options:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"../src/types/index.ts\"\n        }}>{`YupTypeErrors`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#example\"\n        }}>{`Example`}</a></li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`    errors?: YupTypeErrors & {\n        minLength?: string;\n        maxLength?: string;\n        lowercase?: string;\n        uppercase?: string;\n        matches?: string;\n        email?: string;\n        url?: string;\n        oneOf?: string;\n        notOneOf?: string;\n    }\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h3>\n    <p>{`In this example we will set and retrieve our custom Yup error messages, for the `}<inlineCode parentName=\"p\">{`minLength`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`required`}</inlineCode>{` rules. The same can be done for all schema types and all schema type rules. Check the schema type's custom error object type definition for which error messages are available.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`import { toYup, StringTypeSchema } from '@metafox/json2yup';\nimport to from 'await-to-js';\n\nconst schema: StringTypeSchema = {\n  type: 'string',\n  strict: true,\n  required: true,\n  minLength: 5,\n  errors: {\n    minLength: 'My custom min length message',\n    required: 'My custom required message'\n  }\n};\n\nconst yupSchema = toYup(schema);\n\nconst [error] = await to(yupSchema.validate('Hi'));\nconsole.log(error.errors); //[\"My custom min length message\"]\n\nconst [error2] = await to(yupSchema.validate(undefined));\nconsole.log(error2.errors); //[\"My custom required message\"]\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}